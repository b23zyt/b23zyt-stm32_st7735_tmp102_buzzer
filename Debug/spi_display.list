
spi_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005978  08005978  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005978  08005978  00006978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005980  08005980  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005980  08005980  00006980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005984  08005984  00006984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005988  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000064  080059ec  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080059ec  000072d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d620  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e42  00000000  00000000  000146b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000164f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c7  00000000  00000000  00017180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001668d  00000000  00000000  00017b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000facb  00000000  00000000  0002e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c56  00000000  00000000  0003dc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c78f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a8c  00000000  00000000  000c7938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cb3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050f4 	.word	0x080050f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080050f4 	.word	0x080050f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800090c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000910:	f000 b96a 	b.w	8000be8 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	460c      	mov	r4, r1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d14e      	bne.n	80009d6 <__udivmoddi4+0xaa>
 8000938:	4694      	mov	ip, r2
 800093a:	458c      	cmp	ip, r1
 800093c:	4686      	mov	lr, r0
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	d962      	bls.n	8000a0a <__udivmoddi4+0xde>
 8000944:	b14a      	cbz	r2, 800095a <__udivmoddi4+0x2e>
 8000946:	f1c2 0320 	rsb	r3, r2, #32
 800094a:	4091      	lsls	r1, r2
 800094c:	fa20 f303 	lsr.w	r3, r0, r3
 8000950:	fa0c fc02 	lsl.w	ip, ip, r2
 8000954:	4319      	orrs	r1, r3
 8000956:	fa00 fe02 	lsl.w	lr, r0, r2
 800095a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095e:	fa1f f68c 	uxth.w	r6, ip
 8000962:	fbb1 f4f7 	udiv	r4, r1, r7
 8000966:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800096a:	fb07 1114 	mls	r1, r7, r4, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb04 f106 	mul.w	r1, r4, r6
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000982:	f080 8112 	bcs.w	8000baa <__udivmoddi4+0x27e>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 810f 	bls.w	8000baa <__udivmoddi4+0x27e>
 800098c:	3c02      	subs	r4, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a59      	subs	r1, r3, r1
 8000992:	fa1f f38e 	uxth.w	r3, lr
 8000996:	fbb1 f0f7 	udiv	r0, r1, r7
 800099a:	fb07 1110 	mls	r1, r7, r0, r1
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb00 f606 	mul.w	r6, r0, r6
 80009a6:	429e      	cmp	r6, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x94>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80009b2:	f080 80fc 	bcs.w	8000bae <__udivmoddi4+0x282>
 80009b6:	429e      	cmp	r6, r3
 80009b8:	f240 80f9 	bls.w	8000bae <__udivmoddi4+0x282>
 80009bc:	4463      	add	r3, ip
 80009be:	3802      	subs	r0, #2
 80009c0:	1b9b      	subs	r3, r3, r6
 80009c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009c6:	2100      	movs	r1, #0
 80009c8:	b11d      	cbz	r5, 80009d2 <__udivmoddi4+0xa6>
 80009ca:	40d3      	lsrs	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	e9c5 3200 	strd	r3, r2, [r5]
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d905      	bls.n	80009e6 <__udivmoddi4+0xba>
 80009da:	b10d      	cbz	r5, 80009e0 <__udivmoddi4+0xb4>
 80009dc:	e9c5 0100 	strd	r0, r1, [r5]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4608      	mov	r0, r1
 80009e4:	e7f5      	b.n	80009d2 <__udivmoddi4+0xa6>
 80009e6:	fab3 f183 	clz	r1, r3
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d146      	bne.n	8000a7c <__udivmoddi4+0x150>
 80009ee:	42a3      	cmp	r3, r4
 80009f0:	d302      	bcc.n	80009f8 <__udivmoddi4+0xcc>
 80009f2:	4290      	cmp	r0, r2
 80009f4:	f0c0 80f0 	bcc.w	8000bd8 <__udivmoddi4+0x2ac>
 80009f8:	1a86      	subs	r6, r0, r2
 80009fa:	eb64 0303 	sbc.w	r3, r4, r3
 80009fe:	2001      	movs	r0, #1
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d0e6      	beq.n	80009d2 <__udivmoddi4+0xa6>
 8000a04:	e9c5 6300 	strd	r6, r3, [r5]
 8000a08:	e7e3      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	f040 8090 	bne.w	8000b30 <__udivmoddi4+0x204>
 8000a10:	eba1 040c 	sub.w	r4, r1, ip
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a26:	fb08 4416 	mls	r4, r8, r6, r4
 8000a2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2e:	fb07 f006 	mul.w	r0, r7, r6
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x11c>
 8000a36:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x11a>
 8000a40:	4298      	cmp	r0, r3
 8000a42:	f200 80cd 	bhi.w	8000be0 <__udivmoddi4+0x2b4>
 8000a46:	4626      	mov	r6, r4
 8000a48:	1a1c      	subs	r4, r3, r0
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a52:	fb08 4410 	mls	r4, r8, r0, r4
 8000a56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a5a:	fb00 f707 	mul.w	r7, r0, r7
 8000a5e:	429f      	cmp	r7, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x148>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a6a:	d202      	bcs.n	8000a72 <__udivmoddi4+0x146>
 8000a6c:	429f      	cmp	r7, r3
 8000a6e:	f200 80b0 	bhi.w	8000bd2 <__udivmoddi4+0x2a6>
 8000a72:	4620      	mov	r0, r4
 8000a74:	1bdb      	subs	r3, r3, r7
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	e7a5      	b.n	80009c8 <__udivmoddi4+0x9c>
 8000a7c:	f1c1 0620 	rsb	r6, r1, #32
 8000a80:	408b      	lsls	r3, r1
 8000a82:	fa22 f706 	lsr.w	r7, r2, r6
 8000a86:	431f      	orrs	r7, r3
 8000a88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a90:	ea43 030c 	orr.w	r3, r3, ip
 8000a94:	40f4      	lsrs	r4, r6
 8000a96:	fa00 f801 	lsl.w	r8, r0, r1
 8000a9a:	0c38      	lsrs	r0, r7, #16
 8000a9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000aa0:	fbb4 fef0 	udiv	lr, r4, r0
 8000aa4:	fa1f fc87 	uxth.w	ip, r7
 8000aa8:	fb00 441e 	mls	r4, r0, lr, r4
 8000aac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ab4:	45a1      	cmp	r9, r4
 8000ab6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aba:	d90a      	bls.n	8000ad2 <__udivmoddi4+0x1a6>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ac2:	f080 8084 	bcs.w	8000bce <__udivmoddi4+0x2a2>
 8000ac6:	45a1      	cmp	r9, r4
 8000ac8:	f240 8081 	bls.w	8000bce <__udivmoddi4+0x2a2>
 8000acc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ad0:	443c      	add	r4, r7
 8000ad2:	eba4 0409 	sub.w	r4, r4, r9
 8000ad6:	fa1f f983 	uxth.w	r9, r3
 8000ada:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ade:	fb00 4413 	mls	r4, r0, r3, r4
 8000ae2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aea:	45a4      	cmp	ip, r4
 8000aec:	d907      	bls.n	8000afe <__udivmoddi4+0x1d2>
 8000aee:	193c      	adds	r4, r7, r4
 8000af0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000af4:	d267      	bcs.n	8000bc6 <__udivmoddi4+0x29a>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	d965      	bls.n	8000bc6 <__udivmoddi4+0x29a>
 8000afa:	3b02      	subs	r3, #2
 8000afc:	443c      	add	r4, r7
 8000afe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b02:	fba0 9302 	umull	r9, r3, r0, r2
 8000b06:	eba4 040c 	sub.w	r4, r4, ip
 8000b0a:	429c      	cmp	r4, r3
 8000b0c:	46ce      	mov	lr, r9
 8000b0e:	469c      	mov	ip, r3
 8000b10:	d351      	bcc.n	8000bb6 <__udivmoddi4+0x28a>
 8000b12:	d04e      	beq.n	8000bb2 <__udivmoddi4+0x286>
 8000b14:	b155      	cbz	r5, 8000b2c <__udivmoddi4+0x200>
 8000b16:	ebb8 030e 	subs.w	r3, r8, lr
 8000b1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b22:	40cb      	lsrs	r3, r1
 8000b24:	431e      	orrs	r6, r3
 8000b26:	40cc      	lsrs	r4, r1
 8000b28:	e9c5 6400 	strd	r6, r4, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e750      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f103 	lsr.w	r1, r0, r3
 8000b38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b40:	4094      	lsls	r4, r2
 8000b42:	430c      	orrs	r4, r1
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4c:	fa1f f78c 	uxth.w	r7, ip
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3110 	mls	r1, r8, r0, r3
 8000b58:	0c23      	lsrs	r3, r4, #16
 8000b5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5e:	fb00 f107 	mul.w	r1, r0, r7
 8000b62:	4299      	cmp	r1, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x24c>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b6e:	d22c      	bcs.n	8000bca <__udivmoddi4+0x29e>
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d92a      	bls.n	8000bca <__udivmoddi4+0x29e>
 8000b74:	3802      	subs	r0, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b80:	fb08 3311 	mls	r3, r8, r1, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb01 f307 	mul.w	r3, r1, r7
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x276>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b98:	d213      	bcs.n	8000bc2 <__udivmoddi4+0x296>
 8000b9a:	42a3      	cmp	r3, r4
 8000b9c:	d911      	bls.n	8000bc2 <__udivmoddi4+0x296>
 8000b9e:	3902      	subs	r1, #2
 8000ba0:	4464      	add	r4, ip
 8000ba2:	1ae4      	subs	r4, r4, r3
 8000ba4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ba8:	e739      	b.n	8000a1e <__udivmoddi4+0xf2>
 8000baa:	4604      	mov	r4, r0
 8000bac:	e6f0      	b.n	8000990 <__udivmoddi4+0x64>
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e706      	b.n	80009c0 <__udivmoddi4+0x94>
 8000bb2:	45c8      	cmp	r8, r9
 8000bb4:	d2ae      	bcs.n	8000b14 <__udivmoddi4+0x1e8>
 8000bb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	e7a8      	b.n	8000b14 <__udivmoddi4+0x1e8>
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	e7ed      	b.n	8000ba2 <__udivmoddi4+0x276>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e799      	b.n	8000afe <__udivmoddi4+0x1d2>
 8000bca:	4630      	mov	r0, r6
 8000bcc:	e7d4      	b.n	8000b78 <__udivmoddi4+0x24c>
 8000bce:	46d6      	mov	lr, sl
 8000bd0:	e77f      	b.n	8000ad2 <__udivmoddi4+0x1a6>
 8000bd2:	4463      	add	r3, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	e74d      	b.n	8000a74 <__udivmoddi4+0x148>
 8000bd8:	4606      	mov	r6, r0
 8000bda:	4623      	mov	r3, r4
 8000bdc:	4608      	mov	r0, r1
 8000bde:	e70f      	b.n	8000a00 <__udivmoddi4+0xd4>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	e730      	b.n	8000a48 <__udivmoddi4+0x11c>
 8000be6:	bf00      	nop

08000be8 <__aeabi_idiv0>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000c0a:	88f8      	ldrh	r0, [r7, #6]
 8000c0c:	88b9      	ldrh	r1, [r7, #4]
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	883c      	ldrh	r4, [r7, #0]
 8000c12:	8b3b      	ldrh	r3, [r7, #24]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	4623      	mov	r3, r4
 8000c18:	f000 fa8a 	bl	8001130 <ST7735_FillRectangle>
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}

08000c24 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <fillScreen+0x2c>)
 8000c30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <fillScreen+0x30>)
 8000c36:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	2100      	movs	r1, #0
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff ffd2 	bl	8000bec <fillRect>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000080 	.word	0x20000080
 8000c54:	20000082 	.word	0x20000082

08000c58 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2140      	movs	r1, #64	@ 0x40
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <ST7735_Select+0x14>)
 8000c62:	f001 fa47 	bl	80020f4 <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40020400 	.word	0x40020400

08000c70 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2140      	movs	r1, #64	@ 0x40
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <ST7735_Unselect+0x14>)
 8000c7a:	f001 fa3b 	bl	80020f4 <HAL_GPIO_WritePin>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020400 	.word	0x40020400

08000c88 <ST7735_Reset>:

void ST7735_Reset()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	4806      	ldr	r0, [pc, #24]	@ (8000cac <ST7735_Reset+0x24>)
 8000c92:	f001 fa2f 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000c96:	2005      	movs	r0, #5
 8000c98:	f000 ff9e 	bl	8001bd8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2180      	movs	r1, #128	@ 0x80
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <ST7735_Reset+0x24>)
 8000ca2:	f001 fa27 	bl	80020f4 <HAL_GPIO_WritePin>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40020800 	.word	0x40020800

08000cb0 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cc0:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <ST7735_WriteCommand+0x2c>)
 8000cc2:	f001 fa17 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000cc6:	1df9      	adds	r1, r7, #7
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <ST7735_WriteCommand+0x30>)
 8000cd0:	f002 ff45 	bl	8003b5e <HAL_SPI_Transmit>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	200000e0 	.word	0x200000e0

08000ce4 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf4:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <ST7735_WriteData+0x30>)
 8000cf6:	f001 f9fd 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <ST7735_WriteData+0x34>)
 8000d06:	f002 ff2a 	bl	8003b5e <HAL_SPI_Transmit>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020000 	.word	0x40020000
 8000d18:	200000e0 	.word	0x200000e0

08000d1c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000d2e:	e034      	b.n	8000d9a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ffb7 	bl	8000cb0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000d4c:	7abb      	ldrb	r3, [r7, #10]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d54:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000d56:	7abb      	ldrb	r3, [r7, #10]
 8000d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d5c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000d5e:	7abb      	ldrb	r3, [r7, #10]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	4619      	mov	r1, r3
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffbb 	bl	8000ce4 <ST7735_WriteData>
            addr += numArgs;
 8000d6e:	7abb      	ldrb	r3, [r7, #10]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00e      	beq.n	8000d9a <DisplayInit+0x7e>
            ms = *addr++;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000d86:	89bb      	ldrh	r3, [r7, #12]
 8000d88:	2bff      	cmp	r3, #255	@ 0xff
 8000d8a:	d102      	bne.n	8000d92 <DisplayInit+0x76>
 8000d8c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d90:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000d92:	89bb      	ldrh	r3, [r7, #12]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 ff1f 	bl	8001bd8 <HAL_Delay>
    while(numCommands--) {
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	1e5a      	subs	r2, r3, #1
 8000d9e:	73fa      	strb	r2, [r7, #15]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1c5      	bne.n	8000d30 <DisplayInit+0x14>
        }
    }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71bb      	strb	r3, [r7, #6]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	717b      	strb	r3, [r7, #5]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000dce:	202a      	movs	r0, #42	@ 0x2a
 8000dd0:	f7ff ff6e 	bl	8000cb0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	733b      	strb	r3, [r7, #12]
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <ST7735_SetAddressWindow+0x88>)
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4413      	add	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	737b      	strb	r3, [r7, #13]
 8000de4:	2300      	movs	r3, #0
 8000de6:	73bb      	strb	r3, [r7, #14]
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <ST7735_SetAddressWindow+0x88>)
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff72 	bl	8000ce4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000e00:	202b      	movs	r0, #43	@ 0x2b
 8000e02:	f7ff ff55 	bl	8000cb0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <ST7735_SetAddressWindow+0x8c>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <ST7735_SetAddressWindow+0x8c>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	793b      	ldrb	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2104      	movs	r1, #4
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000e2a:	202c      	movs	r0, #44	@ 0x2c
 8000e2c:	f7ff ff40 	bl	8000cb0 <ST7735_WriteCommand>
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	20000087 	.word	0x20000087
 8000e3c:	20000088 	.word	0x20000088

08000e40 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000e4a:	f7ff ff05 	bl	8000c58 <ST7735_Select>
    ST7735_Reset();
 8000e4e:	f7ff ff1b 	bl	8000c88 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000e52:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <ST7735_Init+0x44>)
 8000e54:	f7ff ff62 	bl	8000d1c <DisplayInit>
    DisplayInit(init_cmds2);
 8000e58:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <ST7735_Init+0x48>)
 8000e5a:	f7ff ff5f 	bl	8000d1c <DisplayInit>
    DisplayInit(init_cmds3);
 8000e5e:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <ST7735_Init+0x4c>)
 8000e60:	f7ff ff5c 	bl	8000d1c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <ST7735_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <ST7735_Init+0x54>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f810 	bl	8000e98 <ST7735_SetRotation>
    ST7735_Unselect();
 8000e78:	f7ff fefa 	bl	8000c70 <ST7735_Unselect>

}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0800514c 	.word	0x0800514c
 8000e88:	08005184 	.word	0x08005184
 8000e8c:	08005194 	.word	0x08005194
 8000e90:	20000085 	.word	0x20000085
 8000e94:	20000086 	.word	0x20000086

08000e98 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b33      	ldr	r3, [pc, #204]	@ (8000f7c <ST7735_SetRotation+0xe4>)
 8000eb0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <ST7735_SetRotation+0xe4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d84e      	bhi.n	8000f58 <ST7735_SetRotation+0xc0>
 8000eba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec0 <ST7735_SetRotation+0x28>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000ef3 	.word	0x08000ef3
 8000ec8:	08000f15 	.word	0x08000f15
 8000ecc:	08000f37 	.word	0x08000f37
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000ed0:	23c0      	movs	r3, #192	@ 0xc0
 8000ed2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <ST7735_SetRotation+0xe8>)
 8000ed6:	22a0      	movs	r2, #160	@ 0xa0
 8000ed8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <ST7735_SetRotation+0xec>)
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	@ (8000f88 <ST7735_SetRotation+0xf0>)
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <ST7735_SetRotation+0xf4>)
 8000ee6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <ST7735_SetRotation+0xf8>)
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	4b29      	ldr	r3, [pc, #164]	@ (8000f94 <ST7735_SetRotation+0xfc>)
 8000eee:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000ef0:	e032      	b.n	8000f58 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000ef2:	23a0      	movs	r3, #160	@ 0xa0
 8000ef4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000ef6:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <ST7735_SetRotation+0xec>)
 8000ef8:	22a0      	movs	r2, #160	@ 0xa0
 8000efa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000efc:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <ST7735_SetRotation+0xe8>)
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <ST7735_SetRotation+0xf0>)
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <ST7735_SetRotation+0xfc>)
 8000f08:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <ST7735_SetRotation+0xf8>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <ST7735_SetRotation+0xf4>)
 8000f10:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f12:	e021      	b.n	8000f58 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <ST7735_SetRotation+0xe8>)
 8000f1a:	22a0      	movs	r2, #160	@ 0xa0
 8000f1c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <ST7735_SetRotation+0xec>)
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <ST7735_SetRotation+0xf0>)
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <ST7735_SetRotation+0xf4>)
 8000f2a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <ST7735_SetRotation+0xf8>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <ST7735_SetRotation+0xfc>)
 8000f32:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f34:	e010      	b.n	8000f58 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000f36:	2360      	movs	r3, #96	@ 0x60
 8000f38:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <ST7735_SetRotation+0xec>)
 8000f3c:	22a0      	movs	r2, #160	@ 0xa0
 8000f3e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <ST7735_SetRotation+0xe8>)
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <ST7735_SetRotation+0xf0>)
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <ST7735_SetRotation+0xfc>)
 8000f4c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <ST7735_SetRotation+0xf8>)
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <ST7735_SetRotation+0xf4>)
 8000f54:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f56:	bf00      	nop
  }
  ST7735_Select();
 8000f58:	f7ff fe7e 	bl	8000c58 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000f5c:	2036      	movs	r0, #54	@ 0x36
 8000f5e:	f7ff fea7 	bl	8000cb0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000f62:	f107 030f 	add.w	r3, r7, #15
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff febb 	bl	8000ce4 <ST7735_WriteData>
  ST7735_Unselect();
 8000f6e:	f7ff fe7f 	bl	8000c70 <ST7735_Unselect>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000084 	.word	0x20000084
 8000f80:	20000082 	.word	0x20000082
 8000f84:	20000080 	.word	0x20000080
 8000f88:	20000085 	.word	0x20000085
 8000f8c:	20000087 	.word	0x20000087
 8000f90:	20000086 	.word	0x20000086
 8000f94:	20000088 	.word	0x20000088

08000f98 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000f98:	b082      	sub	sp, #8
 8000f9a:	b590      	push	{r4, r7, lr}
 8000f9c:	b089      	sub	sp, #36	@ 0x24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	80bb      	strh	r3, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2d8      	uxtb	r0, r3
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	b2d9      	uxtb	r1, r3
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b2dc      	uxtb	r4, r3
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000fce:	4413      	add	r3, r2
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	f7ff feea 	bl	8000db0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	e043      	b.n	800106a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000fe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	3b20      	subs	r3, #32
 8000fe8:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	e029      	b.n	8001058 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00e      	beq.n	8001032 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001014:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	b29b      	uxth	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	743b      	strb	r3, [r7, #16]
 800101e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001020:	b2db      	uxtb	r3, r3
 8001022:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fe5a 	bl	8000ce4 <ST7735_WriteData>
 8001030:	e00f      	b.n	8001052 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001032:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	733b      	strb	r3, [r7, #12]
 800103e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001042:	b2db      	uxtb	r3, r3
 8001044:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2102      	movs	r1, #2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe49 	bl	8000ce4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3301      	adds	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800105c:	461a      	mov	r2, r3
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4293      	cmp	r3, r2
 8001062:	d3cf      	bcc.n	8001004 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800106e:	461a      	mov	r2, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	4293      	cmp	r3, r2
 8001074:	d3b5      	bcc.n	8000fe2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3724      	adds	r7, #36	@ 0x24
 800107c:	46bd      	mov	sp, r7
 800107e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001082:	b002      	add	sp, #8
 8001084:	4770      	bx	lr
	...

08001088 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001088:	b082      	sub	sp, #8
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af04      	add	r7, sp, #16
 8001090:	603a      	str	r2, [r7, #0]
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	4603      	mov	r3, r0
 8001096:	80fb      	strh	r3, [r7, #6]
 8001098:	460b      	mov	r3, r1
 800109a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800109c:	f7ff fddc 	bl	8000c58 <ST7735_Select>

    while(*str) {
 80010a0:	e033      	b.n	800110a <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	7d3a      	ldrb	r2, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <ST7735_WriteString+0xa0>)
 80010aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010ae:	4293      	cmp	r3, r2
 80010b0:	db16      	blt.n	80010e0 <ST7735_WriteString+0x58>
            x = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80010b6:	7d7b      	ldrb	r3, [r7, #21]
 80010b8:	461a      	mov	r2, r3
 80010ba:	88bb      	ldrh	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	7d7a      	ldrb	r2, [r7, #21]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a19      	ldr	r2, [pc, #100]	@ (800112c <ST7735_WriteString+0xa4>)
 80010c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	da21      	bge.n	8001114 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d103      	bne.n	80010e0 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	603b      	str	r3, [r7, #0]
                continue;
 80010de:	e014      	b.n	800110a <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	88b9      	ldrh	r1, [r7, #4]
 80010e6:	88f8      	ldrh	r0, [r7, #6]
 80010e8:	8c3b      	ldrh	r3, [r7, #32]
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	8bbb      	ldrh	r3, [r7, #28]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f7ff ff4f 	bl	8000f98 <ST7735_WriteChar>
        x += font.width;
 80010fa:	7d3b      	ldrb	r3, [r7, #20]
 80010fc:	461a      	mov	r2, r3
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4413      	add	r3, r2
 8001102:	80fb      	strh	r3, [r7, #6]
        str++;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	603b      	str	r3, [r7, #0]
    while(*str) {
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1c7      	bne.n	80010a2 <ST7735_WriteString+0x1a>
 8001112:	e000      	b.n	8001116 <ST7735_WriteString+0x8e>
                break;
 8001114:	bf00      	nop
    }

    ST7735_Unselect();
 8001116:	f7ff fdab 	bl	8000c70 <ST7735_Unselect>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001124:	b002      	add	sp, #8
 8001126:	4770      	bx	lr
 8001128:	20000080 	.word	0x20000080
 800112c:	20000082 	.word	0x20000082

08001130 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4a38      	ldr	r2, [pc, #224]	@ (8001234 <ST7735_FillRectangle+0x104>)
 8001152:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001156:	4293      	cmp	r3, r2
 8001158:	da67      	bge.n	800122a <ST7735_FillRectangle+0xfa>
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	4a36      	ldr	r2, [pc, #216]	@ (8001238 <ST7735_FillRectangle+0x108>)
 800115e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001162:	4293      	cmp	r3, r2
 8001164:	da61      	bge.n	800122a <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8001166:	88fa      	ldrh	r2, [r7, #6]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4413      	add	r3, r2
 800116c:	4a31      	ldr	r2, [pc, #196]	@ (8001234 <ST7735_FillRectangle+0x104>)
 800116e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001172:	4293      	cmp	r3, r2
 8001174:	dd06      	ble.n	8001184 <ST7735_FillRectangle+0x54>
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <ST7735_FillRectangle+0x104>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	b29a      	uxth	r2, r3
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001184:	88ba      	ldrh	r2, [r7, #4]
 8001186:	883b      	ldrh	r3, [r7, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a2b      	ldr	r2, [pc, #172]	@ (8001238 <ST7735_FillRectangle+0x108>)
 800118c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001190:	4293      	cmp	r3, r2
 8001192:	dd06      	ble.n	80011a2 <ST7735_FillRectangle+0x72>
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <ST7735_FillRectangle+0x108>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	b29a      	uxth	r2, r3
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80011a2:	f7ff fd59 	bl	8000c58 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	b2d9      	uxtb	r1, r3
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3b01      	subs	r3, #1
 80011bc:	b2dc      	uxtb	r4, r3
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	883b      	ldrh	r3, [r7, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4622      	mov	r2, r4
 80011d0:	f7ff fdee 	bl	8000db0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80011d4:	8c3b      	ldrh	r3, [r7, #32]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	733b      	strb	r3, [r7, #12]
 80011de:	8c3b      	ldrh	r3, [r7, #32]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ea:	4814      	ldr	r0, [pc, #80]	@ (800123c <ST7735_FillRectangle+0x10c>)
 80011ec:	f000 ff82 	bl	80020f4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80011f0:	883b      	ldrh	r3, [r7, #0]
 80011f2:	80bb      	strh	r3, [r7, #4]
 80011f4:	e013      	b.n	800121e <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	80fb      	strh	r3, [r7, #6]
 80011fa:	e00a      	b.n	8001212 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80011fc:	f107 010c 	add.w	r1, r7, #12
 8001200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001204:	2202      	movs	r2, #2
 8001206:	480e      	ldr	r0, [pc, #56]	@ (8001240 <ST7735_FillRectangle+0x110>)
 8001208:	f002 fca9 	bl	8003b5e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	3b01      	subs	r3, #1
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f1      	bne.n	80011fc <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e8      	bne.n	80011f6 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8001224:	f7ff fd24 	bl	8000c70 <ST7735_Unselect>
 8001228:	e000      	b.n	800122c <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800122a:	bf00      	nop
}
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	20000080 	.word	0x20000080
 8001238:	20000082 	.word	0x20000082
 800123c:	40020000 	.word	0x40020000
 8001240:	200000e0 	.word	0x200000e0

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09c      	sub	sp, #112	@ 0x70
 8001248:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fc53 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f917 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 fa0d 	bl	8001670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001256:	f000 f9e1 	bl	800161c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800125a:	f000 f9a9 	bl	80015b0 <MX_SPI1_Init>
  MX_I2C1_Init();
 800125e:	f000 f979 	bl	8001554 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init(0);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fdec 	bl	8000e40 <ST7735_Init>
  fillScreen(BLACK);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fcdb 	bl	8000c24 <fillScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = REG_TEMP;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	 	      ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8001274:	2390      	movs	r3, #144	@ 0x90
 8001276:	4619      	mov	r1, r3
 8001278:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800127c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	4872      	ldr	r0, [pc, #456]	@ (8001450 <main+0x20c>)
 8001286:	f001 f893 	bl	80023b0 <HAL_I2C_Master_Transmit>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	 	      if ( ret != HAL_OK ) {
 8001290:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001294:	2b00      	cmp	r3, #0
 8001296:	d009      	beq.n	80012ac <main+0x68>
	 	        strcpy((char*)buf, "Error Tx\r\n");
 8001298:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800129c:	4a6d      	ldr	r2, [pc, #436]	@ (8001454 <main+0x210>)
 800129e:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a0:	c303      	stmia	r3!, {r0, r1}
 80012a2:	801a      	strh	r2, [r3, #0]
 80012a4:	3302      	adds	r3, #2
 80012a6:	0c12      	lsrs	r2, r2, #16
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e089      	b.n	80013c0 <main+0x17c>
	 	      } else {

	 	        // Read 2 bytes from the temperature register
	 	        ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80012ac:	2390      	movs	r3, #144	@ 0x90
 80012ae:	4619      	mov	r1, r3
 80012b0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2302      	movs	r3, #2
 80012bc:	4864      	ldr	r0, [pc, #400]	@ (8001450 <main+0x20c>)
 80012be:	f001 f975 	bl	80025ac <HAL_I2C_Master_Receive>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	 	        if ( ret != HAL_OK ) {
 80012c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d009      	beq.n	80012e4 <main+0xa0>
	 	          strcpy((char*)buf, "Error Rx\r\n");
 80012d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012d4:	4a60      	ldr	r2, [pc, #384]	@ (8001458 <main+0x214>)
 80012d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d8:	c303      	stmia	r3!, {r0, r1}
 80012da:	801a      	strh	r2, [r3, #0]
 80012dc:	3302      	adds	r3, #2
 80012de:	0c12      	lsrs	r2, r2, #16
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e06d      	b.n	80013c0 <main+0x17c>
	 	        } else {

	 	          //Combine the bytes
	 	          val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 80012e4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	 	          // Convert to 2's complement, since temperature can be negative
	 	          if ( val > 0x7FF ) {
 80012fc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001304:	db07      	blt.n	8001316 <main+0xd2>
	 	            val |= 0xF000;
 8001306:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800130a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800130e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001312:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	 	          }

	 	          // Convert to float temperature value (Celsius)
	 	          temp_c = val * 0.0625;
 8001316:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fa34 	bl	8000788 <__aeabi_i2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <main+0x218>)
 8001326:	f7fe ffb3 	bl	8000290 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fa93 	bl	800085c <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	653b      	str	r3, [r7, #80]	@ 0x50
	 	          tmp = temp_c;
 800133a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800133c:	65bb      	str	r3, [r7, #88]	@ 0x58

	 	          // Convert temperature to decimal format
	 	          temp_c *= 100;
 800133e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001342:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001460 <main+0x21c>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	 	          sprintf((char*)buf,
	 	                "%u.%u C",
	 	                ((unsigned int)temp_c / 100),
 800134e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001356:	ee17 2a90 	vmov	r2, s15
	 	          sprintf((char*)buf,
 800135a:	4b42      	ldr	r3, [pc, #264]	@ (8001464 <main+0x220>)
 800135c:	fba3 2302 	umull	r2, r3, r3, r2
 8001360:	095a      	lsrs	r2, r3, #5
	 	                ((unsigned int)temp_c % 100));
 8001362:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	ee17 1a90 	vmov	r1, s15
	 	          sprintf((char*)buf,
 800136e:	4b3d      	ldr	r3, [pc, #244]	@ (8001464 <main+0x220>)
 8001370:	fba3 0301 	umull	r0, r3, r3, r1
 8001374:	095b      	lsrs	r3, r3, #5
 8001376:	2064      	movs	r0, #100	@ 0x64
 8001378:	fb00 f303 	mul.w	r3, r0, r3
 800137c:	1acb      	subs	r3, r1, r3
 800137e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001382:	4939      	ldr	r1, [pc, #228]	@ (8001468 <main+0x224>)
 8001384:	f003 fa16 	bl	80047b4 <siprintf>

	 	          sprintf(console,
	 	          	                "%u.%u C\r\n",
	 	          	                ((unsigned int)temp_c / 100),
 8001388:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800138c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001390:	ee17 2a90 	vmov	r2, s15
	 	          sprintf(console,
 8001394:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <main+0x220>)
 8001396:	fba3 2302 	umull	r2, r3, r3, r2
 800139a:	095a      	lsrs	r2, r3, #5
	 	          	                ((unsigned int)temp_c % 100));
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80013a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a4:	ee17 1a90 	vmov	r1, s15
	 	          sprintf(console,
 80013a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <main+0x220>)
 80013aa:	fba3 0301 	umull	r0, r3, r3, r1
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2064      	movs	r0, #100	@ 0x64
 80013b2:	fb00 f303 	mul.w	r3, r0, r3
 80013b6:	1acb      	subs	r3, r1, r3
 80013b8:	4638      	mov	r0, r7
 80013ba:	492c      	ldr	r1, [pc, #176]	@ (800146c <main+0x228>)
 80013bc:	f003 f9fa 	bl	80047b4 <siprintf>

	 	        }
	 	      }
	 	     fillScreen(BLACK);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fc2f 	bl	8000c24 <fillScreen>
//	 	     ST7735_SetRotation(1);
	 	     ST7735_WriteString(0, 0+10, "Current Temperature", Font_7x10, RED, BLACK);
 80013c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <main+0x22c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	9202      	str	r2, [sp, #8]
 80013cc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	9200      	str	r2, [sp, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a26      	ldr	r2, [pc, #152]	@ (8001474 <main+0x230>)
 80013da:	210a      	movs	r1, #10
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe53 	bl	8001088 <ST7735_WriteString>
	 	     ST7735_WriteString(0, 4*10, (char*)buf, Font_7x10, GREEN, BLACK);
 80013e2:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <main+0x22c>)
 80013e4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	9202      	str	r2, [sp, #8]
 80013ec:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80013f0:	9201      	str	r2, [sp, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	9200      	str	r2, [sp, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	460a      	mov	r2, r1
 80013fa:	2128      	movs	r1, #40	@ 0x28
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fe43 	bl	8001088 <ST7735_WriteString>
	 	     HAL_UART_Transmit(&huart2, (uint8_t *)console, strlen(console), HAL_MAX_DELAY);
 8001402:	463b      	mov	r3, r7
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	4639      	mov	r1, r7
 8001410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001414:	4818      	ldr	r0, [pc, #96]	@ (8001478 <main+0x234>)
 8001416:	f002 fe11 	bl	800403c <HAL_UART_Transmit>
	 	     if (tmp >= 30.0) {
 800141a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800141e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	db06      	blt.n	800143a <main+0x1f6>
	 	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001432:	4812      	ldr	r0, [pc, #72]	@ (800147c <main+0x238>)
 8001434:	f000 fe5e 	bl	80020f4 <HAL_GPIO_WritePin>
 8001438:	e005      	b.n	8001446 <main+0x202>
	 	     }else{
	 	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001440:	480e      	ldr	r0, [pc, #56]	@ (800147c <main+0x238>)
 8001442:	f000 fe57 	bl	80020f4 <HAL_GPIO_WritePin>
	 	     }

	 	     HAL_Delay(3000);
 8001446:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800144a:	f000 fbc5 	bl	8001bd8 <HAL_Delay>
	  buf[0] = REG_TEMP;
 800144e:	e70e      	b.n	800126e <main+0x2a>
 8001450:	2000008c 	.word	0x2000008c
 8001454:	0800510c 	.word	0x0800510c
 8001458:	08005118 	.word	0x08005118
 800145c:	3fb00000 	.word	0x3fb00000
 8001460:	42c80000 	.word	0x42c80000
 8001464:	51eb851f 	.word	0x51eb851f
 8001468:	08005124 	.word	0x08005124
 800146c:	0800512c 	.word	0x0800512c
 8001470:	20000000 	.word	0x20000000
 8001474:	08005138 	.word	0x08005138
 8001478:	20000138 	.word	0x20000138
 800147c:	40020000 	.word	0x40020000

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	@ 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	2230      	movs	r2, #48	@ 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f9b0 	bl	80047f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4b28      	ldr	r3, [pc, #160]	@ (800154c <SystemClock_Config+0xcc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a27      	ldr	r2, [pc, #156]	@ (800154c <SystemClock_Config+0xcc>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b4:	4b25      	ldr	r3, [pc, #148]	@ (800154c <SystemClock_Config+0xcc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <SystemClock_Config+0xd0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014cc:	4a20      	ldr	r2, [pc, #128]	@ (8001550 <SystemClock_Config+0xd0>)
 80014ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <SystemClock_Config+0xd0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	2302      	movs	r3, #2
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014f8:	2348      	movs	r3, #72	@ 0x48
 80014fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001500:	2307      	movs	r3, #7
 8001502:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4618      	mov	r0, r3
 800150a:	f001 fe07 	bl	800311c <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001514:	f000 f944 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	230f      	movs	r3, #15
 800151a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151c:	2302      	movs	r3, #2
 800151e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001528:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	2102      	movs	r1, #2
 8001534:	4618      	mov	r0, r3
 8001536:	f002 f869 	bl	800360c <HAL_RCC_ClockConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001540:	f000 f92e 	bl	80017a0 <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	3750      	adds	r7, #80	@ 0x50
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800155a:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <MX_I2C1_Init+0x54>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001560:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x58>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001572:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001592:	f000 fdc9 	bl	8002128 <HAL_I2C_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800159c:	f000 f900 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000008c 	.word	0x2000008c
 80015a8:	40005400 	.word	0x40005400
 80015ac:	000186a0 	.word	0x000186a0

080015b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015b6:	4a18      	ldr	r2, [pc, #96]	@ (8001618 <MX_SPI1_Init+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015e4:	2228      	movs	r2, #40	@ 0x28
 80015e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_SPI1_Init+0x64>)
 80015fc:	220a      	movs	r2, #10
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_SPI1_Init+0x64>)
 8001602:	f002 fa23 	bl	8003a4c <HAL_SPI_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800160c:	f000 f8c8 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200000e0 	.word	0x200000e0
 8001618:	40013000 	.word	0x40013000

0800161c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <MX_USART2_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001654:	f002 fca2 	bl	8003f9c <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f89f 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000138 	.word	0x20000138
 800166c:	40004400 	.word	0x40004400

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b41      	ldr	r3, [pc, #260]	@ (8001790 <MX_GPIO_Init+0x120>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a40      	ldr	r2, [pc, #256]	@ (8001790 <MX_GPIO_Init+0x120>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <MX_GPIO_Init+0x120>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a39      	ldr	r2, [pc, #228]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <MX_GPIO_Init+0x120>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2180      	movs	r1, #128	@ 0x80
 80016fa:	4826      	ldr	r0, [pc, #152]	@ (8001794 <MX_GPIO_Init+0x124>)
 80016fc:	f000 fcfa 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001706:	4824      	ldr	r0, [pc, #144]	@ (8001798 <MX_GPIO_Init+0x128>)
 8001708:	f000 fcf4 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2140      	movs	r1, #64	@ 0x40
 8001710:	4822      	ldr	r0, [pc, #136]	@ (800179c <MX_GPIO_Init+0x12c>)
 8001712:	f000 fcef 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800171c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4819      	ldr	r0, [pc, #100]	@ (8001794 <MX_GPIO_Init+0x124>)
 800172e:	f000 fb5d 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4812      	ldr	r0, [pc, #72]	@ (8001794 <MX_GPIO_Init+0x124>)
 800174a:	f000 fb4f 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800174e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	480c      	ldr	r0, [pc, #48]	@ (8001798 <MX_GPIO_Init+0x128>)
 8001768:	f000 fb40 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176c:	2340      	movs	r3, #64	@ 0x40
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	@ (800179c <MX_GPIO_Init+0x12c>)
 8001784:	f000 fb32 	bl	8001dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	@ 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <HAL_MspInit+0x4c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_MspInit+0x4c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ee:	2007      	movs	r0, #7
 80017f0:	f000 fac8 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <HAL_I2C_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12c      	bne.n	800187c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_I2C_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_I2C_MspInit+0x88>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_I2C_MspInit+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800183e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001844:	2312      	movs	r3, #18
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001850:	2304      	movs	r3, #4
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	480c      	ldr	r0, [pc, #48]	@ (800188c <HAL_I2C_MspInit+0x8c>)
 800185c:	f000 fac6 	bl	8001dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_I2C_MspInit+0x88>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <HAL_I2C_MspInit+0x88>)
 800186a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_I2C_MspInit+0x88>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	@ 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40005400 	.word	0x40005400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020400 	.word	0x40020400

08001890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	@ (8001914 <HAL_SPI_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12b      	bne.n	800190a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <HAL_SPI_MspInit+0x88>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	4a17      	ldr	r2, [pc, #92]	@ (8001918 <HAL_SPI_MspInit+0x88>)
 80018bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_SPI_MspInit+0x88>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_SPI_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <HAL_SPI_MspInit+0x88>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_SPI_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018ea:	23e0      	movs	r3, #224	@ 0xe0
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018fa:	2305      	movs	r3, #5
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <HAL_SPI_MspInit+0x8c>)
 8001906:	f000 fa71 	bl	8001dec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40013000 	.word	0x40013000
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <HAL_UART_MspInit+0x84>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_UART_MspInit+0x8c>)
 8001996:	f000 fa29 	bl	8001dec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <NMI_Handler+0x4>

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <MemManage_Handler+0x4>

080019c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a06:	f000 f8c7 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f002 fee0 	bl	8004804 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20018000 	.word	0x20018000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20000180 	.word	0x20000180
 8001a78:	200002d0 	.word	0x200002d0

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001aa4:	f7ff ffea 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f002 fe9f 	bl	8004810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff fbb7 	bl	8001244 <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ae4:	08005988 	.word	0x08005988
  ldr r2, =_sbss
 8001ae8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001aec:	200002d0 	.word	0x200002d0

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <HAL_Init+0x40>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_Init+0x40>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_Init+0x40>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f931 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fe42 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f93b 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b74:	f000 f911 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000010 	.word	0x20000010
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	20000184 	.word	0x20000184

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000184 	.word	0x20000184

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000010 	.word	0x20000010

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	@ (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff47 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff5c 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff8e 	bl	8001cd8 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffb0 	bl	8001d40 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e159      	b.n	80020bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	f040 8148 	bne.w	80020b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d005      	beq.n	8001e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d130      	bne.n	8001ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 0201 	and.w	r2, r3, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d017      	beq.n	8001edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d123      	bne.n	8001f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220f      	movs	r2, #15
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	08da      	lsrs	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3208      	adds	r2, #8
 8001f2a:	69b9      	ldr	r1, [r7, #24]
 8001f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0203 	and.w	r2, r3, #3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a2 	beq.w	80020b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b57      	ldr	r3, [pc, #348]	@ (80020d4 <HAL_GPIO_Init+0x2e8>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	4a56      	ldr	r2, [pc, #344]	@ (80020d4 <HAL_GPIO_Init+0x2e8>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f82:	4b54      	ldr	r3, [pc, #336]	@ (80020d4 <HAL_GPIO_Init+0x2e8>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8e:	4a52      	ldr	r2, [pc, #328]	@ (80020d8 <HAL_GPIO_Init+0x2ec>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a49      	ldr	r2, [pc, #292]	@ (80020dc <HAL_GPIO_Init+0x2f0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x202>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a48      	ldr	r2, [pc, #288]	@ (80020e0 <HAL_GPIO_Init+0x2f4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x1fe>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a47      	ldr	r2, [pc, #284]	@ (80020e4 <HAL_GPIO_Init+0x2f8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x1fa>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a46      	ldr	r2, [pc, #280]	@ (80020e8 <HAL_GPIO_Init+0x2fc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x1f6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a45      	ldr	r2, [pc, #276]	@ (80020ec <HAL_GPIO_Init+0x300>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x1f2>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fde:	2307      	movs	r3, #7
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002000:	4935      	ldr	r1, [pc, #212]	@ (80020d8 <HAL_GPIO_Init+0x2ec>)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200e:	4b38      	ldr	r3, [pc, #224]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002032:	4a2f      	ldr	r2, [pc, #188]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002038:	4b2d      	ldr	r3, [pc, #180]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800205c:	4a24      	ldr	r2, [pc, #144]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002062:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002086:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b0:	4a0f      	ldr	r2, [pc, #60]	@ (80020f0 <HAL_GPIO_Init+0x304>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	f67f aea2 	bls.w	8001e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40013c00 	.word	0x40013c00

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e12b      	b.n	8002392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fb56 	bl	8001800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	@ 0x24
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800218a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800218c:	f001 fc36 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8002190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a81      	ldr	r2, [pc, #516]	@ (800239c <HAL_I2C_Init+0x274>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d807      	bhi.n	80021ac <HAL_I2C_Init+0x84>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a80      	ldr	r2, [pc, #512]	@ (80023a0 <HAL_I2C_Init+0x278>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	bf94      	ite	ls
 80021a4:	2301      	movls	r3, #1
 80021a6:	2300      	movhi	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e006      	b.n	80021ba <HAL_I2C_Init+0x92>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a7d      	ldr	r2, [pc, #500]	@ (80023a4 <HAL_I2C_Init+0x27c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf94      	ite	ls
 80021b4:	2301      	movls	r3, #1
 80021b6:	2300      	movhi	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0e7      	b.n	8002392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a78      	ldr	r2, [pc, #480]	@ (80023a8 <HAL_I2C_Init+0x280>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	@ (800239c <HAL_I2C_Init+0x274>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d802      	bhi.n	80021fc <HAL_I2C_Init+0xd4>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3301      	adds	r3, #1
 80021fa:	e009      	b.n	8002210 <HAL_I2C_Init+0xe8>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	4a69      	ldr	r2, [pc, #420]	@ (80023ac <HAL_I2C_Init+0x284>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	3301      	adds	r3, #1
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002222:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	495c      	ldr	r1, [pc, #368]	@ (800239c <HAL_I2C_Init+0x274>)
 800222c:	428b      	cmp	r3, r1
 800222e:	d819      	bhi.n	8002264 <HAL_I2C_Init+0x13c>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e59      	subs	r1, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fbb1 f3f3 	udiv	r3, r1, r3
 800223e:	1c59      	adds	r1, r3, #1
 8002240:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002244:	400b      	ands	r3, r1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_I2C_Init+0x138>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e59      	subs	r1, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fbb1 f3f3 	udiv	r3, r1, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	e051      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002260:	2304      	movs	r3, #4
 8002262:	e04f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <HAL_I2C_Init+0x168>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e012      	b.n	80022b6 <HAL_I2C_Init+0x18e>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Init+0x196>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e022      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10e      	bne.n	80022e4 <HAL_I2C_Init+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e58      	subs	r0, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	440b      	add	r3, r1
 80022d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e2:	e00f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	0099      	lsls	r1, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	6809      	ldr	r1, [r1, #0]
 8002308:	4313      	orrs	r3, r2
 800230a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002332:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6911      	ldr	r1, [r2, #16]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68d2      	ldr	r2, [r2, #12]
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	430b      	orrs	r3, r1
 8002346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	000186a0 	.word	0x000186a0
 80023a0:	001e847f 	.word	0x001e847f
 80023a4:	003d08ff 	.word	0x003d08ff
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	10624dd3 	.word	0x10624dd3

080023b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	817b      	strh	r3, [r7, #10]
 80023c0:	4613      	mov	r3, r2
 80023c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fbfc 	bl	8001bc0 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	f040 80e0 	bne.w	8002598 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	4970      	ldr	r1, [pc, #448]	@ (80025a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fc64 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	e0d3      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_Master_Transmit+0x50>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0cc      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d007      	beq.n	8002426 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	@ 0x21
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2210      	movs	r2, #16
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	893a      	ldrh	r2, [r7, #8]
 8002456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a50      	ldr	r2, [pc, #320]	@ (80025a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 face 	bl	8002a10 <I2C_MasterRequestWrite>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e08d      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002494:	e066      	b.n	8002564 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	6a39      	ldr	r1, [r7, #32]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fd22 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11b      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x188>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d017      	beq.n	8002538 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	6a39      	ldr	r1, [r7, #32]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fd19 	bl	8002f74 <I2C_WaitOnBTFFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e01a      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d194      	bne.n	8002496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	00100002 	.word	0x00100002
 80025a8:	ffff0000 	.word	0xffff0000

080025ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	@ 0x30
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	461a      	mov	r2, r3
 80025b8:	460b      	mov	r3, r1
 80025ba:	817b      	strh	r3, [r7, #10]
 80025bc:	4613      	mov	r3, r2
 80025be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fafe 	bl	8001bc0 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	f040 8217 	bne.w	8002a02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2319      	movs	r3, #25
 80025da:	2201      	movs	r2, #1
 80025dc:	497c      	ldr	r1, [pc, #496]	@ (80027d0 <HAL_I2C_Master_Receive+0x224>)
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb66 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	e20a      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_I2C_Master_Receive+0x50>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e203      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d007      	beq.n	8002622 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002630:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2222      	movs	r2, #34	@ 0x22
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2210      	movs	r2, #16
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	893a      	ldrh	r2, [r7, #8]
 8002652:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a5c      	ldr	r2, [pc, #368]	@ (80027d4 <HAL_I2C_Master_Receive+0x228>)
 8002662:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fa52 	bl	8002b14 <I2C_MasterRequestRead>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1c4      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	2b00      	cmp	r3, #0
 8002680:	d113      	bne.n	80026aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e198      	b.n	80029dc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d11b      	bne.n	80026ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e178      	b.n	80029dc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d11b      	bne.n	800272a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002700:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002710:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	e158      	b.n	80029dc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002750:	e144      	b.n	80029dc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002756:	2b03      	cmp	r3, #3
 8002758:	f200 80f1 	bhi.w	800293e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002760:	2b01      	cmp	r3, #1
 8002762:	d123      	bne.n	80027ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002766:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fc4b 	bl	8003004 <I2C_WaitOnRXNEFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e145      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027aa:	e117      	b.n	80029dc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d14e      	bne.n	8002852 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	2200      	movs	r2, #0
 80027bc:	4906      	ldr	r1, [pc, #24]	@ (80027d8 <HAL_I2C_Master_Receive+0x22c>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa76 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e11a      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
 80027ce:	bf00      	nop
 80027d0:	00100002 	.word	0x00100002
 80027d4:	ffff0000 	.word	0xffff0000
 80027d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002850:	e0c4      	b.n	80029dc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002858:	2200      	movs	r2, #0
 800285a:	496c      	ldr	r1, [pc, #432]	@ (8002a0c <HAL_I2C_Master_Receive+0x460>)
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fa27 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0cb      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	2200      	movs	r2, #0
 80028b6:	4955      	ldr	r1, [pc, #340]	@ (8002a0c <HAL_I2C_Master_Receive+0x460>)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f9f9 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e09d      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800293c:	e04e      	b.n	80029dc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002940:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fb5e 	bl	8003004 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e058      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d124      	bne.n	80029dc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f aeb6 	bne.w	8002752 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3728      	adds	r7, #40	@ 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010004 	.word	0x00010004

08002a10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d006      	beq.n	8002a3a <I2C_MasterRequestWrite+0x2a>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d003      	beq.n	8002a3a <I2C_MasterRequestWrite+0x2a>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a38:	d108      	bne.n	8002a4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e00b      	b.n	8002a64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	2b12      	cmp	r3, #18
 8002a52:	d107      	bne.n	8002a64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f91d 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00d      	beq.n	8002a98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a8a:	d103      	bne.n	8002a94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e035      	b.n	8002b04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002aa0:	d108      	bne.n	8002ab4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ab0:	611a      	str	r2, [r3, #16]
 8002ab2:	e01b      	b.n	8002aec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ab4:	897b      	ldrh	r3, [r7, #10]
 8002ab6:	11db      	asrs	r3, r3, #7
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f003 0306 	and.w	r3, r3, #6
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f063 030f 	orn	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	490e      	ldr	r1, [pc, #56]	@ (8002b0c <I2C_MasterRequestWrite+0xfc>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f966 	bl	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e010      	b.n	8002b04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4907      	ldr	r1, [pc, #28]	@ (8002b10 <I2C_MasterRequestWrite+0x100>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f956 	bl	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	00010008 	.word	0x00010008
 8002b10:	00010002 	.word	0x00010002

08002b14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	460b      	mov	r3, r1
 8002b22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d006      	beq.n	8002b4e <I2C_MasterRequestRead+0x3a>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d003      	beq.n	8002b4e <I2C_MasterRequestRead+0x3a>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b4c:	d108      	bne.n	8002b60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e00b      	b.n	8002b78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	2b11      	cmp	r3, #17
 8002b66:	d107      	bne.n	8002b78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f893 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b9e:	d103      	bne.n	8002ba8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e079      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bb4:	d108      	bne.n	8002bc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]
 8002bc6:	e05f      	b.n	8002c88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bc8:	897b      	ldrh	r3, [r7, #10]
 8002bca:	11db      	asrs	r3, r3, #7
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f003 0306 	and.w	r3, r3, #6
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f063 030f 	orn	r3, r3, #15
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4930      	ldr	r1, [pc, #192]	@ (8002ca8 <I2C_MasterRequestRead+0x194>)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8dc 	bl	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e054      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4929      	ldr	r1, [pc, #164]	@ (8002cac <I2C_MasterRequestRead+0x198>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f8cc 	bl	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e044      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f831 	bl	8002cb0 <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c62:	d103      	bne.n	8002c6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e017      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c70:	897b      	ldrh	r3, [r7, #10]
 8002c72:	11db      	asrs	r3, r3, #7
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f003 0306 	and.w	r3, r3, #6
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f063 030e 	orn	r3, r3, #14
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4907      	ldr	r1, [pc, #28]	@ (8002cac <I2C_MasterRequestRead+0x198>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f888 	bl	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	00010008 	.word	0x00010008
 8002cac:	00010002 	.word	0x00010002

08002cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc0:	e048      	b.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cc8:	d044      	beq.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7fe ff79 	bl	8001bc0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d139      	bne.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10d      	bne.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	e00c      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d116      	bne.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e023      	b.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	0c1b      	lsrs	r3, r3, #16
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d10d      	bne.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	e00c      	b.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d093      	beq.n	8002cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db2:	e071      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc2:	d123      	bne.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ddc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e067      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e12:	d041      	beq.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e14:	f7fe fed4 	bl	8001bc0 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d302      	bcc.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d136      	bne.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10c      	bne.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	e00b      	b.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e021      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10c      	bne.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e00b      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f af6d 	bne.w	8002db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef0:	e034      	b.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8e3 	bl	80030be <I2C_IsAcknowledgeFailed>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e034      	b.n	8002f6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f08:	d028      	beq.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fe59 	bl	8001bc0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11d      	bne.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2a:	2b80      	cmp	r3, #128	@ 0x80
 8002f2c:	d016      	beq.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e007      	b.n	8002f6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f66:	2b80      	cmp	r3, #128	@ 0x80
 8002f68:	d1c3      	bne.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f80:	e034      	b.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f89b 	bl	80030be <I2C_IsAcknowledgeFailed>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e034      	b.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f98:	d028      	beq.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fe fe11 	bl	8001bc0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11d      	bne.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d016      	beq.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d1c3      	bne.n	8002f82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003010:	e049      	b.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b10      	cmp	r3, #16
 800301e:	d119      	bne.n	8003054 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0210 	mvn.w	r2, #16
 8003028:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e030      	b.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003054:	f7fe fdb4 	bl	8001bc0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d302      	bcc.n	800306a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11d      	bne.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003074:	2b40      	cmp	r3, #64	@ 0x40
 8003076:	d016      	beq.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e007      	b.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b0:	2b40      	cmp	r3, #64	@ 0x40
 80030b2:	d1ae      	bne.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d4:	d11b      	bne.n	800310e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e267      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d075      	beq.n	8003226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313a:	4b88      	ldr	r3, [pc, #544]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00c      	beq.n	8003160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003146:	4b85      	ldr	r3, [pc, #532]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314e:	2b08      	cmp	r3, #8
 8003150:	d112      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b82      	ldr	r3, [pc, #520]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800315e:	d10b      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b7e      	ldr	r3, [pc, #504]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <HAL_RCC_OscConfig+0x108>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d157      	bne.n	8003224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e242      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x74>
 8003182:	4b76      	ldr	r3, [pc, #472]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a75      	ldr	r2, [pc, #468]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x98>
 800319a:	4b70      	ldr	r3, [pc, #448]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6f      	ldr	r2, [pc, #444]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b6d      	ldr	r3, [pc, #436]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6c      	ldr	r2, [pc, #432]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 80031b4:	4b69      	ldr	r3, [pc, #420]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a68      	ldr	r2, [pc, #416]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fcf4 	bl	8001bc0 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe fcf0 	bl	8001bc0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e207      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b5b      	ldr	r3, [pc, #364]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xc0>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fce0 	bl	8001bc0 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fcdc 	bl	8001bc0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1f3      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b51      	ldr	r3, [pc, #324]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0xe8>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003232:	4b4a      	ldr	r3, [pc, #296]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b47      	ldr	r3, [pc, #284]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b44      	ldr	r3, [pc, #272]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b41      	ldr	r3, [pc, #260]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1c7      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4937      	ldr	r1, [pc, #220]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b34      	ldr	r3, [pc, #208]	@ (8003360 <HAL_RCC_OscConfig+0x244>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe fc95 	bl	8001bc0 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe fc91 	bl	8001bc0 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1a8      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b2b      	ldr	r3, [pc, #172]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b28      	ldr	r3, [pc, #160]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4925      	ldr	r1, [pc, #148]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_RCC_OscConfig+0x244>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fc74 	bl	8001bc0 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe fc70 	bl	8001bc0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e187      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d036      	beq.n	8003374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <HAL_RCC_OscConfig+0x248>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe fc54 	bl	8001bc0 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe fc50 	bl	8001bc0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e167      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x200>
 800333a:	e01b      	b.n	8003374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333c:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <HAL_RCC_OscConfig+0x248>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fe fc3d 	bl	8001bc0 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	e00e      	b.n	8003368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334a:	f7fe fc39 	bl	8001bc0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d907      	bls.n	8003368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e150      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
 800335c:	40023800 	.word	0x40023800
 8003360:	42470000 	.word	0x42470000
 8003364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b88      	ldr	r3, [pc, #544]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ea      	bne.n	800334a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8097 	beq.w	80034b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b81      	ldr	r3, [pc, #516]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b7d      	ldr	r3, [pc, #500]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a7c      	ldr	r2, [pc, #496]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b7a      	ldr	r3, [pc, #488]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b77      	ldr	r3, [pc, #476]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d118      	bne.n	80033f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b74      	ldr	r3, [pc, #464]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a73      	ldr	r2, [pc, #460]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fe fbf9 	bl	8001bc0 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe fbf5 	bl	8001bc0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e10c      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x2ea>
 80033f8:	4b64      	ldr	r3, [pc, #400]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a63      	ldr	r2, [pc, #396]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	@ 0x70
 8003404:	e01c      	b.n	8003440 <HAL_RCC_OscConfig+0x324>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b05      	cmp	r3, #5
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x30c>
 800340e:	4b5f      	ldr	r3, [pc, #380]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	4a5e      	ldr	r2, [pc, #376]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	6713      	str	r3, [r2, #112]	@ 0x70
 800341a:	4b5c      	ldr	r3, [pc, #368]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	@ 0x70
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0x324>
 8003428:	4b58      	ldr	r3, [pc, #352]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342c:	4a57      	ldr	r2, [pc, #348]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	@ 0x70
 8003434:	4b55      	ldr	r3, [pc, #340]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	4a54      	ldr	r2, [pc, #336]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe fbba 	bl	8001bc0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe fbb6 	bl	8001bc0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e0cb      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	4b49      	ldr	r3, [pc, #292]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ee      	beq.n	8003450 <HAL_RCC_OscConfig+0x334>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fe fba4 	bl	8001bc0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe fba0 	bl	8001bc0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0b5      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	4b3e      	ldr	r3, [pc, #248]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ee      	bne.n	800347c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a4:	4b39      	ldr	r3, [pc, #228]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	4a38      	ldr	r2, [pc, #224]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80a1 	beq.w	80035fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ba:	4b34      	ldr	r3, [pc, #208]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d05c      	beq.n	8003580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d141      	bne.n	8003552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <HAL_RCC_OscConfig+0x478>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fb74 	bl	8001bc0 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fb70 	bl	8001bc0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e087      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b27      	ldr	r3, [pc, #156]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	019b      	lsls	r3, r3, #6
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	3b01      	subs	r3, #1
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	491b      	ldr	r1, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003524:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_RCC_OscConfig+0x478>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352a:	f7fe fb49 	bl	8001bc0 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003532:	f7fe fb45 	bl	8001bc0 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e05c      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x416>
 8003550:	e054      	b.n	80035fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <HAL_RCC_OscConfig+0x478>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fb32 	bl	8001bc0 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fb2e 	bl	8001bc0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e045      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x444>
 800357e:	e03d      	b.n	80035fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e038      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
 800358c:	40023800 	.word	0x40023800
 8003590:	40007000 	.word	0x40007000
 8003594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003598:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x4ec>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d028      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d121      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d11a      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d111      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	3b01      	subs	r3, #1
 80035e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800

0800360c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0cc      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b68      	ldr	r3, [pc, #416]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d90c      	bls.n	8003648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b65      	ldr	r3, [pc, #404]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a58      	ldr	r2, [pc, #352]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800366a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a52      	ldr	r2, [pc, #328]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d044      	beq.n	800372c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d119      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b3f      	ldr	r3, [pc, #252]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	4b3b      	ldr	r3, [pc, #236]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e067      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b37      	ldr	r3, [pc, #220]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4934      	ldr	r1, [pc, #208]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fe fa60 	bl	8001bc0 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fe fa5c 	bl	8001bc0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e04f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372c:	4b25      	ldr	r3, [pc, #148]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d20c      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b22      	ldr	r3, [pc, #136]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377e:	4b12      	ldr	r3, [pc, #72]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f821 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	490a      	ldr	r1, [pc, #40]	@ (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe f9c0 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00
 80037c8:	40023800 	.word	0x40023800
 80037cc:	0800592c 	.word	0x0800592c
 80037d0:	20000008 	.word	0x20000008
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b094      	sub	sp, #80	@ 0x50
 80037de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e4:	2300      	movs	r3, #0
 80037e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e8:	2300      	movs	r3, #0
 80037ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f0:	4b79      	ldr	r3, [pc, #484]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d00d      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x40>
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	f200 80e1 	bhi.w	80039c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x34>
 8003806:	2b04      	cmp	r3, #4
 8003808:	d003      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x3a>
 800380a:	e0db      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b73      	ldr	r3, [pc, #460]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x204>)
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003810:	e0db      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003812:	4b73      	ldr	r3, [pc, #460]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003814:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003816:	e0d8      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003818:	4b6f      	ldr	r3, [pc, #444]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003822:	4b6d      	ldr	r3, [pc, #436]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382e:	4b6a      	ldr	r3, [pc, #424]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	2200      	movs	r2, #0
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003838:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003840:	633b      	str	r3, [r7, #48]	@ 0x30
 8003842:	2300      	movs	r3, #0
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
 8003846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800384a:	4622      	mov	r2, r4
 800384c:	462b      	mov	r3, r5
 800384e:	f04f 0000 	mov.w	r0, #0
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	0159      	lsls	r1, r3, #5
 8003858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800385c:	0150      	lsls	r0, r2, #5
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4621      	mov	r1, r4
 8003864:	1a51      	subs	r1, r2, r1
 8003866:	6139      	str	r1, [r7, #16]
 8003868:	4629      	mov	r1, r5
 800386a:	eb63 0301 	sbc.w	r3, r3, r1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800387c:	4659      	mov	r1, fp
 800387e:	018b      	lsls	r3, r1, #6
 8003880:	4651      	mov	r1, sl
 8003882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003886:	4651      	mov	r1, sl
 8003888:	018a      	lsls	r2, r1, #6
 800388a:	4651      	mov	r1, sl
 800388c:	ebb2 0801 	subs.w	r8, r2, r1
 8003890:	4659      	mov	r1, fp
 8003892:	eb63 0901 	sbc.w	r9, r3, r1
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038aa:	4690      	mov	r8, r2
 80038ac:	4699      	mov	r9, r3
 80038ae:	4623      	mov	r3, r4
 80038b0:	eb18 0303 	adds.w	r3, r8, r3
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	462b      	mov	r3, r5
 80038b8:	eb49 0303 	adc.w	r3, r9, r3
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ca:	4629      	mov	r1, r5
 80038cc:	024b      	lsls	r3, r1, #9
 80038ce:	4621      	mov	r1, r4
 80038d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038d4:	4621      	mov	r1, r4
 80038d6:	024a      	lsls	r2, r1, #9
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038de:	2200      	movs	r2, #0
 80038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038e8:	f7fd f808 	bl	80008fc <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f4:	e058      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f6:	4b38      	ldr	r3, [pc, #224]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	099b      	lsrs	r3, r3, #6
 80038fc:	2200      	movs	r2, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	4611      	mov	r1, r2
 8003902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
 800390c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003910:	4642      	mov	r2, r8
 8003912:	464b      	mov	r3, r9
 8003914:	f04f 0000 	mov.w	r0, #0
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	0159      	lsls	r1, r3, #5
 800391e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003922:	0150      	lsls	r0, r2, #5
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4641      	mov	r1, r8
 800392a:	ebb2 0a01 	subs.w	sl, r2, r1
 800392e:	4649      	mov	r1, r9
 8003930:	eb63 0b01 	sbc.w	fp, r3, r1
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003948:	ebb2 040a 	subs.w	r4, r2, sl
 800394c:	eb63 050b 	sbc.w	r5, r3, fp
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	00eb      	lsls	r3, r5, #3
 800395a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800395e:	00e2      	lsls	r2, r4, #3
 8003960:	4614      	mov	r4, r2
 8003962:	461d      	mov	r5, r3
 8003964:	4643      	mov	r3, r8
 8003966:	18e3      	adds	r3, r4, r3
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	464b      	mov	r3, r9
 800396c:	eb45 0303 	adc.w	r3, r5, r3
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800397e:	4629      	mov	r1, r5
 8003980:	028b      	lsls	r3, r1, #10
 8003982:	4621      	mov	r1, r4
 8003984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003988:	4621      	mov	r1, r4
 800398a:	028a      	lsls	r2, r1, #10
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003992:	2200      	movs	r2, #0
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	61fa      	str	r2, [r7, #28]
 8003998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800399c:	f7fc ffae 	bl	80008fc <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4613      	mov	r3, r2
 80039a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80039b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039c2:	e002      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x204>)
 80039c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3750      	adds	r7, #80	@ 0x50
 80039d0:	46bd      	mov	sp, r7
 80039d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	007a1200 	.word	0x007a1200

080039e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e8:	4b03      	ldr	r3, [pc, #12]	@ (80039f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000008 	.word	0x20000008

080039fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a00:	f7ff fff0 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0a9b      	lsrs	r3, r3, #10
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4903      	ldr	r1, [pc, #12]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	0800593c 	.word	0x0800593c

08003a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a28:	f7ff ffdc 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0b5b      	lsrs	r3, r3, #13
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	@ (8003a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	0800593c 	.word	0x0800593c

08003a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07b      	b.n	8003b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a6e:	d009      	beq.n	8003a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
 8003a76:	e005      	b.n	8003a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fef6 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b08:	ea42 0103 	orr.w	r1, r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 0104 	and.w	r1, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	f003 0210 	and.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b088      	sub	sp, #32
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_SPI_Transmit+0x22>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e12d      	b.n	8003ddc <HAL_SPI_Transmit+0x27e>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b88:	f7fe f81a 	bl	8001bc0 <HAL_GetTick>
 8003b8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d002      	beq.n	8003ba4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ba2:	e116      	b.n	8003dd2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_Transmit+0x52>
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bb4:	e10d      	b.n	8003dd2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bfc:	d10f      	bne.n	8003c1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b40      	cmp	r3, #64	@ 0x40
 8003c2a:	d007      	beq.n	8003c3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c44:	d14f      	bne.n	8003ce6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Transmit+0xf6>
 8003c4e:	8afb      	ldrh	r3, [r7, #22]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d142      	bne.n	8003cda <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	881a      	ldrh	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c78:	e02f      	b.n	8003cda <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d112      	bne.n	8003cae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cac:	e015      	b.n	8003cda <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cae:	f7fd ff87 	bl	8001bc0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d803      	bhi.n	8003cc6 <HAL_SPI_Transmit+0x168>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc4:	d102      	bne.n	8003ccc <HAL_SPI_Transmit+0x16e>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003cd8:	e07b      	b.n	8003dd2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ca      	bne.n	8003c7a <HAL_SPI_Transmit+0x11c>
 8003ce4:	e050      	b.n	8003d88 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0x196>
 8003cee:	8afb      	ldrh	r3, [r7, #22]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d144      	bne.n	8003d7e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	7812      	ldrb	r2, [r2, #0]
 8003d00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d1a:	e030      	b.n	8003d7e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d113      	bne.n	8003d52 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d50:	e015      	b.n	8003d7e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d52:	f7fd ff35 	bl	8001bc0 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d803      	bhi.n	8003d6a <HAL_SPI_Transmit+0x20c>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d68:	d102      	bne.n	8003d70 <HAL_SPI_Transmit+0x212>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003d7c:	e029      	b.n	8003dd2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1c9      	bne.n	8003d1c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f8b1 	bl	8003ef4 <SPI_EndRxTxTransaction>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e003      	b.n	8003dd2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003df4:	f7fd fee4 	bl	8001bc0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4413      	add	r3, r2
 8003e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e04:	f7fd fedc 	bl	8001bc0 <HAL_GetTick>
 8003e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e0a:	4b39      	ldr	r3, [pc, #228]	@ (8003ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	015b      	lsls	r3, r3, #5
 8003e10:	0d1b      	lsrs	r3, r3, #20
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e1a:	e054      	b.n	8003ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e22:	d050      	beq.n	8003ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e24:	f7fd fecc 	bl	8001bc0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d902      	bls.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d13d      	bne.n	8003eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e52:	d111      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5c:	d004      	beq.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e66:	d107      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e80:	d10f      	bne.n	8003ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e017      	b.n	8003ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d19b      	bne.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000008 	.word	0x20000008

08003ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2201      	movs	r2, #1
 8003f08:	2102      	movs	r1, #2
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff6a 	bl	8003de4 <SPI_WaitFlagStateUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e032      	b.n	8003f8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f26:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <SPI_EndRxTxTransaction+0xa0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <SPI_EndRxTxTransaction+0xa4>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	0d5b      	lsrs	r3, r3, #21
 8003f32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f44:	d112      	bne.n	8003f6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2180      	movs	r1, #128	@ 0x80
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7ff ff47 	bl	8003de4 <SPI_WaitFlagStateUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d016      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e00f      	b.n	8003f8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b80      	cmp	r3, #128	@ 0x80
 8003f84:	d0f2      	beq.n	8003f6c <SPI_EndRxTxTransaction+0x78>
 8003f86:	e000      	b.n	8003f8a <SPI_EndRxTxTransaction+0x96>
        break;
 8003f88:	bf00      	nop
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000008 	.word	0x20000008
 8003f98:	165e9f81 	.word	0x165e9f81

08003f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e042      	b.n	8004034 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd fcac 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	@ 0x24
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f973 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	d175      	bne.n	8004148 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Transmit+0x2c>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e06e      	b.n	800414a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2221      	movs	r2, #33	@ 0x21
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407a:	f7fd fda1 	bl	8001bc0 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004094:	d108      	bne.n	80040a8 <HAL_UART_Transmit+0x6c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e003      	b.n	80040b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040b0:	e02e      	b.n	8004110 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	@ 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f848 	bl	8004152 <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e03a      	b.n	800414a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3302      	adds	r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	e007      	b.n	8004102 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1cb      	bne.n	80040b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2140      	movs	r1, #64	@ 0x40
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f814 	bl	8004152 <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004162:	e03b      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800416a:	d037      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fd fd28 	bl	8001bc0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	6a3a      	ldr	r2, [r7, #32]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <UART_WaitOnFlagUntilTimeout+0x30>
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e03a      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d023      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d020      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d01d      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d116      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f81d 	bl	8004204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2208      	movs	r2, #8
 80041ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e00f      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4013      	ands	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d0b4      	beq.n	8004164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b095      	sub	sp, #84	@ 0x54
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800422c:	643a      	str	r2, [r7, #64]	@ 0x40
 800422e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3314      	adds	r3, #20
 800425e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	2b01      	cmp	r3, #1
 800427a:	d119      	bne.n	80042b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	60bb      	str	r3, [r7, #8]
   return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f023 0310 	bic.w	r3, r3, #16
 8004292:	647b      	str	r3, [r7, #68]	@ 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800429c:	61ba      	str	r2, [r7, #24]
 800429e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042be:	bf00      	nop
 80042c0:	3754      	adds	r7, #84	@ 0x54
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d0:	b0c0      	sub	sp, #256	@ 0x100
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	68d9      	ldr	r1, [r3, #12]
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	ea40 0301 	orr.w	r3, r0, r1
 80042f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	431a      	orrs	r2, r3
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	431a      	orrs	r2, r3
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004324:	f021 010c 	bic.w	r1, r1, #12
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004332:	430b      	orrs	r3, r1
 8004334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	6999      	ldr	r1, [r3, #24]
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	ea40 0301 	orr.w	r3, r0, r1
 8004352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b8f      	ldr	r3, [pc, #572]	@ (8004598 <UART_SetConfig+0x2cc>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d005      	beq.n	800436c <UART_SetConfig+0xa0>
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b8d      	ldr	r3, [pc, #564]	@ (800459c <UART_SetConfig+0x2d0>)
 8004368:	429a      	cmp	r2, r3
 800436a:	d104      	bne.n	8004376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7ff fb5a 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 8004370:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004374:	e003      	b.n	800437e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004376:	f7ff fb41 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 800437a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004388:	f040 810c 	bne.w	80045a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800438c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004390:	2200      	movs	r2, #0
 8004392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004396:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800439a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	1891      	adds	r1, r2, r2
 80043a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043a6:	415b      	adcs	r3, r3
 80043a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043ae:	4621      	mov	r1, r4
 80043b0:	eb12 0801 	adds.w	r8, r2, r1
 80043b4:	4629      	mov	r1, r5
 80043b6:	eb43 0901 	adc.w	r9, r3, r1
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ce:	4690      	mov	r8, r2
 80043d0:	4699      	mov	r9, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	eb18 0303 	adds.w	r3, r8, r3
 80043d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043dc:	462b      	mov	r3, r5
 80043de:	eb49 0303 	adc.w	r3, r9, r3
 80043e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043fa:	460b      	mov	r3, r1
 80043fc:	18db      	adds	r3, r3, r3
 80043fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004400:	4613      	mov	r3, r2
 8004402:	eb42 0303 	adc.w	r3, r2, r3
 8004406:	657b      	str	r3, [r7, #84]	@ 0x54
 8004408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800440c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004410:	f7fc fa74 	bl	80008fc <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b61      	ldr	r3, [pc, #388]	@ (80045a0 <UART_SetConfig+0x2d4>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011c      	lsls	r4, r3, #4
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800442c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800443c:	415b      	adcs	r3, r3
 800443e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004444:	4641      	mov	r1, r8
 8004446:	eb12 0a01 	adds.w	sl, r2, r1
 800444a:	4649      	mov	r1, r9
 800444c:	eb43 0b01 	adc.w	fp, r3, r1
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800445c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004464:	4692      	mov	sl, r2
 8004466:	469b      	mov	fp, r3
 8004468:	4643      	mov	r3, r8
 800446a:	eb1a 0303 	adds.w	r3, sl, r3
 800446e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004472:	464b      	mov	r3, r9
 8004474:	eb4b 0303 	adc.w	r3, fp, r3
 8004478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004488:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800448c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004490:	460b      	mov	r3, r1
 8004492:	18db      	adds	r3, r3, r3
 8004494:	643b      	str	r3, [r7, #64]	@ 0x40
 8004496:	4613      	mov	r3, r2
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
 800449e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044a6:	f7fc fa29 	bl	80008fc <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	4b3b      	ldr	r3, [pc, #236]	@ (80045a0 <UART_SetConfig+0x2d4>)
 80044b2:	fba3 2301 	umull	r2, r3, r3, r1
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2264      	movs	r2, #100	@ 0x64
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	1acb      	subs	r3, r1, r3
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044c6:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <UART_SetConfig+0x2d4>)
 80044c8:	fba3 2302 	umull	r2, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044d4:	441c      	add	r4, r3
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044f0:	415b      	adcs	r3, r3
 80044f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800452c:	464b      	mov	r3, r9
 800452e:	460a      	mov	r2, r1
 8004530:	eb42 0303 	adc.w	r3, r2, r3
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004544:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800454c:	460b      	mov	r3, r1
 800454e:	18db      	adds	r3, r3, r3
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004552:	4613      	mov	r3, r2
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800455e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004562:	f7fc f9cb 	bl	80008fc <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <UART_SetConfig+0x2d4>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	@ 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	3332      	adds	r3, #50	@ 0x32
 800457e:	4a08      	ldr	r2, [pc, #32]	@ (80045a0 <UART_SetConfig+0x2d4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 0207 	and.w	r2, r3, #7
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4422      	add	r2, r4
 8004592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004594:	e106      	b.n	80047a4 <UART_SetConfig+0x4d8>
 8004596:	bf00      	nop
 8004598:	40011000 	.word	0x40011000
 800459c:	40011400 	.word	0x40011400
 80045a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045b6:	4642      	mov	r2, r8
 80045b8:	464b      	mov	r3, r9
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	6239      	str	r1, [r7, #32]
 80045be:	415b      	adcs	r3, r3
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c6:	4641      	mov	r1, r8
 80045c8:	1854      	adds	r4, r2, r1
 80045ca:	4649      	mov	r1, r9
 80045cc:	eb43 0501 	adc.w	r5, r3, r1
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	00eb      	lsls	r3, r5, #3
 80045da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045de:	00e2      	lsls	r2, r4, #3
 80045e0:	4614      	mov	r4, r2
 80045e2:	461d      	mov	r5, r3
 80045e4:	4643      	mov	r3, r8
 80045e6:	18e3      	adds	r3, r4, r3
 80045e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045ec:	464b      	mov	r3, r9
 80045ee:	eb45 0303 	adc.w	r3, r5, r3
 80045f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004602:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004612:	4629      	mov	r1, r5
 8004614:	008b      	lsls	r3, r1, #2
 8004616:	4621      	mov	r1, r4
 8004618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461c:	4621      	mov	r1, r4
 800461e:	008a      	lsls	r2, r1, #2
 8004620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004624:	f7fc f96a 	bl	80008fc <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4b60      	ldr	r3, [pc, #384]	@ (80047b0 <UART_SetConfig+0x4e4>)
 800462e:	fba3 2302 	umull	r2, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	011c      	lsls	r4, r3, #4
 8004636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004640:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	1891      	adds	r1, r2, r2
 800464e:	61b9      	str	r1, [r7, #24]
 8004650:	415b      	adcs	r3, r3
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004658:	4641      	mov	r1, r8
 800465a:	1851      	adds	r1, r2, r1
 800465c:	6139      	str	r1, [r7, #16]
 800465e:	4649      	mov	r1, r9
 8004660:	414b      	adcs	r3, r1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004670:	4659      	mov	r1, fp
 8004672:	00cb      	lsls	r3, r1, #3
 8004674:	4651      	mov	r1, sl
 8004676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467a:	4651      	mov	r1, sl
 800467c:	00ca      	lsls	r2, r1, #3
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	4603      	mov	r3, r0
 8004684:	4642      	mov	r2, r8
 8004686:	189b      	adds	r3, r3, r2
 8004688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800468c:	464b      	mov	r3, r9
 800468e:	460a      	mov	r2, r1
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046b0:	4649      	mov	r1, r9
 80046b2:	008b      	lsls	r3, r1, #2
 80046b4:	4641      	mov	r1, r8
 80046b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ba:	4641      	mov	r1, r8
 80046bc:	008a      	lsls	r2, r1, #2
 80046be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046c2:	f7fc f91b 	bl	80008fc <__aeabi_uldivmod>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4611      	mov	r1, r2
 80046cc:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <UART_SetConfig+0x4e4>)
 80046ce:	fba3 2301 	umull	r2, r3, r3, r1
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2264      	movs	r2, #100	@ 0x64
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	1acb      	subs	r3, r1, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	3332      	adds	r3, #50	@ 0x32
 80046e0:	4a33      	ldr	r2, [pc, #204]	@ (80047b0 <UART_SetConfig+0x4e4>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046ec:	441c      	add	r4, r3
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	415b      	adcs	r3, r3
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800473e:	464b      	mov	r3, r9
 8004740:	460a      	mov	r2, r1
 8004742:	eb42 0303 	adc.w	r3, r2, r3
 8004746:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	663b      	str	r3, [r7, #96]	@ 0x60
 8004752:	667a      	str	r2, [r7, #100]	@ 0x64
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004760:	4649      	mov	r1, r9
 8004762:	008b      	lsls	r3, r1, #2
 8004764:	4641      	mov	r1, r8
 8004766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476a:	4641      	mov	r1, r8
 800476c:	008a      	lsls	r2, r1, #2
 800476e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004772:	f7fc f8c3 	bl	80008fc <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <UART_SetConfig+0x4e4>)
 800477c:	fba3 1302 	umull	r1, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2164      	movs	r1, #100	@ 0x64
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	3332      	adds	r3, #50	@ 0x32
 800478e:	4a08      	ldr	r2, [pc, #32]	@ (80047b0 <UART_SetConfig+0x4e4>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	f003 020f 	and.w	r2, r3, #15
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4422      	add	r2, r4
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b0:	51eb851f 	.word	0x51eb851f

080047b4 <siprintf>:
 80047b4:	b40e      	push	{r1, r2, r3}
 80047b6:	b500      	push	{lr}
 80047b8:	b09c      	sub	sp, #112	@ 0x70
 80047ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80047bc:	9002      	str	r0, [sp, #8]
 80047be:	9006      	str	r0, [sp, #24]
 80047c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047c4:	4809      	ldr	r0, [pc, #36]	@ (80047ec <siprintf+0x38>)
 80047c6:	9107      	str	r1, [sp, #28]
 80047c8:	9104      	str	r1, [sp, #16]
 80047ca:	4909      	ldr	r1, [pc, #36]	@ (80047f0 <siprintf+0x3c>)
 80047cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	6800      	ldr	r0, [r0, #0]
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	a902      	add	r1, sp, #8
 80047d8:	f000 f89c 	bl	8004914 <_svfiprintf_r>
 80047dc:	9b02      	ldr	r3, [sp, #8]
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	b01c      	add	sp, #112	@ 0x70
 80047e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e8:	b003      	add	sp, #12
 80047ea:	4770      	bx	lr
 80047ec:	20000014 	.word	0x20000014
 80047f0:	ffff0208 	.word	0xffff0208

080047f4 <memset>:
 80047f4:	4402      	add	r2, r0
 80047f6:	4603      	mov	r3, r0
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d100      	bne.n	80047fe <memset+0xa>
 80047fc:	4770      	bx	lr
 80047fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004802:	e7f9      	b.n	80047f8 <memset+0x4>

08004804 <__errno>:
 8004804:	4b01      	ldr	r3, [pc, #4]	@ (800480c <__errno+0x8>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000014 	.word	0x20000014

08004810 <__libc_init_array>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	4d0d      	ldr	r5, [pc, #52]	@ (8004848 <__libc_init_array+0x38>)
 8004814:	4c0d      	ldr	r4, [pc, #52]	@ (800484c <__libc_init_array+0x3c>)
 8004816:	1b64      	subs	r4, r4, r5
 8004818:	10a4      	asrs	r4, r4, #2
 800481a:	2600      	movs	r6, #0
 800481c:	42a6      	cmp	r6, r4
 800481e:	d109      	bne.n	8004834 <__libc_init_array+0x24>
 8004820:	4d0b      	ldr	r5, [pc, #44]	@ (8004850 <__libc_init_array+0x40>)
 8004822:	4c0c      	ldr	r4, [pc, #48]	@ (8004854 <__libc_init_array+0x44>)
 8004824:	f000 fc66 	bl	80050f4 <_init>
 8004828:	1b64      	subs	r4, r4, r5
 800482a:	10a4      	asrs	r4, r4, #2
 800482c:	2600      	movs	r6, #0
 800482e:	42a6      	cmp	r6, r4
 8004830:	d105      	bne.n	800483e <__libc_init_array+0x2e>
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	f855 3b04 	ldr.w	r3, [r5], #4
 8004838:	4798      	blx	r3
 800483a:	3601      	adds	r6, #1
 800483c:	e7ee      	b.n	800481c <__libc_init_array+0xc>
 800483e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004842:	4798      	blx	r3
 8004844:	3601      	adds	r6, #1
 8004846:	e7f2      	b.n	800482e <__libc_init_array+0x1e>
 8004848:	08005980 	.word	0x08005980
 800484c:	08005980 	.word	0x08005980
 8004850:	08005980 	.word	0x08005980
 8004854:	08005984 	.word	0x08005984

08004858 <__retarget_lock_acquire_recursive>:
 8004858:	4770      	bx	lr

0800485a <__retarget_lock_release_recursive>:
 800485a:	4770      	bx	lr

0800485c <__ssputs_r>:
 800485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	688e      	ldr	r6, [r1, #8]
 8004862:	461f      	mov	r7, r3
 8004864:	42be      	cmp	r6, r7
 8004866:	680b      	ldr	r3, [r1, #0]
 8004868:	4682      	mov	sl, r0
 800486a:	460c      	mov	r4, r1
 800486c:	4690      	mov	r8, r2
 800486e:	d82d      	bhi.n	80048cc <__ssputs_r+0x70>
 8004870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004878:	d026      	beq.n	80048c8 <__ssputs_r+0x6c>
 800487a:	6965      	ldr	r5, [r4, #20]
 800487c:	6909      	ldr	r1, [r1, #16]
 800487e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004882:	eba3 0901 	sub.w	r9, r3, r1
 8004886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800488a:	1c7b      	adds	r3, r7, #1
 800488c:	444b      	add	r3, r9
 800488e:	106d      	asrs	r5, r5, #1
 8004890:	429d      	cmp	r5, r3
 8004892:	bf38      	it	cc
 8004894:	461d      	movcc	r5, r3
 8004896:	0553      	lsls	r3, r2, #21
 8004898:	d527      	bpl.n	80048ea <__ssputs_r+0x8e>
 800489a:	4629      	mov	r1, r5
 800489c:	f000 f958 	bl	8004b50 <_malloc_r>
 80048a0:	4606      	mov	r6, r0
 80048a2:	b360      	cbz	r0, 80048fe <__ssputs_r+0xa2>
 80048a4:	6921      	ldr	r1, [r4, #16]
 80048a6:	464a      	mov	r2, r9
 80048a8:	f000 fbc4 	bl	8005034 <memcpy>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	6126      	str	r6, [r4, #16]
 80048ba:	6165      	str	r5, [r4, #20]
 80048bc:	444e      	add	r6, r9
 80048be:	eba5 0509 	sub.w	r5, r5, r9
 80048c2:	6026      	str	r6, [r4, #0]
 80048c4:	60a5      	str	r5, [r4, #8]
 80048c6:	463e      	mov	r6, r7
 80048c8:	42be      	cmp	r6, r7
 80048ca:	d900      	bls.n	80048ce <__ssputs_r+0x72>
 80048cc:	463e      	mov	r6, r7
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	4632      	mov	r2, r6
 80048d2:	4641      	mov	r1, r8
 80048d4:	f000 fb84 	bl	8004fe0 <memmove>
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	1b9b      	subs	r3, r3, r6
 80048dc:	60a3      	str	r3, [r4, #8]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	4433      	add	r3, r6
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	2000      	movs	r0, #0
 80048e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ea:	462a      	mov	r2, r5
 80048ec:	f000 fb4a 	bl	8004f84 <_realloc_r>
 80048f0:	4606      	mov	r6, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d1e0      	bne.n	80048b8 <__ssputs_r+0x5c>
 80048f6:	6921      	ldr	r1, [r4, #16]
 80048f8:	4650      	mov	r0, sl
 80048fa:	f000 fba9 	bl	8005050 <_free_r>
 80048fe:	230c      	movs	r3, #12
 8004900:	f8ca 3000 	str.w	r3, [sl]
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004910:	e7e9      	b.n	80048e6 <__ssputs_r+0x8a>
	...

08004914 <_svfiprintf_r>:
 8004914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004918:	4698      	mov	r8, r3
 800491a:	898b      	ldrh	r3, [r1, #12]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	b09d      	sub	sp, #116	@ 0x74
 8004920:	4607      	mov	r7, r0
 8004922:	460d      	mov	r5, r1
 8004924:	4614      	mov	r4, r2
 8004926:	d510      	bpl.n	800494a <_svfiprintf_r+0x36>
 8004928:	690b      	ldr	r3, [r1, #16]
 800492a:	b973      	cbnz	r3, 800494a <_svfiprintf_r+0x36>
 800492c:	2140      	movs	r1, #64	@ 0x40
 800492e:	f000 f90f 	bl	8004b50 <_malloc_r>
 8004932:	6028      	str	r0, [r5, #0]
 8004934:	6128      	str	r0, [r5, #16]
 8004936:	b930      	cbnz	r0, 8004946 <_svfiprintf_r+0x32>
 8004938:	230c      	movs	r3, #12
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004940:	b01d      	add	sp, #116	@ 0x74
 8004942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004946:	2340      	movs	r3, #64	@ 0x40
 8004948:	616b      	str	r3, [r5, #20]
 800494a:	2300      	movs	r3, #0
 800494c:	9309      	str	r3, [sp, #36]	@ 0x24
 800494e:	2320      	movs	r3, #32
 8004950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004954:	f8cd 800c 	str.w	r8, [sp, #12]
 8004958:	2330      	movs	r3, #48	@ 0x30
 800495a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004af8 <_svfiprintf_r+0x1e4>
 800495e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004962:	f04f 0901 	mov.w	r9, #1
 8004966:	4623      	mov	r3, r4
 8004968:	469a      	mov	sl, r3
 800496a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800496e:	b10a      	cbz	r2, 8004974 <_svfiprintf_r+0x60>
 8004970:	2a25      	cmp	r2, #37	@ 0x25
 8004972:	d1f9      	bne.n	8004968 <_svfiprintf_r+0x54>
 8004974:	ebba 0b04 	subs.w	fp, sl, r4
 8004978:	d00b      	beq.n	8004992 <_svfiprintf_r+0x7e>
 800497a:	465b      	mov	r3, fp
 800497c:	4622      	mov	r2, r4
 800497e:	4629      	mov	r1, r5
 8004980:	4638      	mov	r0, r7
 8004982:	f7ff ff6b 	bl	800485c <__ssputs_r>
 8004986:	3001      	adds	r0, #1
 8004988:	f000 80a7 	beq.w	8004ada <_svfiprintf_r+0x1c6>
 800498c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800498e:	445a      	add	r2, fp
 8004990:	9209      	str	r2, [sp, #36]	@ 0x24
 8004992:	f89a 3000 	ldrb.w	r3, [sl]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 809f 	beq.w	8004ada <_svfiprintf_r+0x1c6>
 800499c:	2300      	movs	r3, #0
 800499e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a6:	f10a 0a01 	add.w	sl, sl, #1
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	9307      	str	r3, [sp, #28]
 80049ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80049b4:	4654      	mov	r4, sl
 80049b6:	2205      	movs	r2, #5
 80049b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049bc:	484e      	ldr	r0, [pc, #312]	@ (8004af8 <_svfiprintf_r+0x1e4>)
 80049be:	f7fb fc17 	bl	80001f0 <memchr>
 80049c2:	9a04      	ldr	r2, [sp, #16]
 80049c4:	b9d8      	cbnz	r0, 80049fe <_svfiprintf_r+0xea>
 80049c6:	06d0      	lsls	r0, r2, #27
 80049c8:	bf44      	itt	mi
 80049ca:	2320      	movmi	r3, #32
 80049cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049d0:	0711      	lsls	r1, r2, #28
 80049d2:	bf44      	itt	mi
 80049d4:	232b      	movmi	r3, #43	@ 0x2b
 80049d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049da:	f89a 3000 	ldrb.w	r3, [sl]
 80049de:	2b2a      	cmp	r3, #42	@ 0x2a
 80049e0:	d015      	beq.n	8004a0e <_svfiprintf_r+0xfa>
 80049e2:	9a07      	ldr	r2, [sp, #28]
 80049e4:	4654      	mov	r4, sl
 80049e6:	2000      	movs	r0, #0
 80049e8:	f04f 0c0a 	mov.w	ip, #10
 80049ec:	4621      	mov	r1, r4
 80049ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049f2:	3b30      	subs	r3, #48	@ 0x30
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	d94b      	bls.n	8004a90 <_svfiprintf_r+0x17c>
 80049f8:	b1b0      	cbz	r0, 8004a28 <_svfiprintf_r+0x114>
 80049fa:	9207      	str	r2, [sp, #28]
 80049fc:	e014      	b.n	8004a28 <_svfiprintf_r+0x114>
 80049fe:	eba0 0308 	sub.w	r3, r0, r8
 8004a02:	fa09 f303 	lsl.w	r3, r9, r3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	46a2      	mov	sl, r4
 8004a0c:	e7d2      	b.n	80049b4 <_svfiprintf_r+0xa0>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	1d19      	adds	r1, r3, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	9103      	str	r1, [sp, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfbb      	ittet	lt
 8004a1a:	425b      	neglt	r3, r3
 8004a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a20:	9307      	strge	r3, [sp, #28]
 8004a22:	9307      	strlt	r3, [sp, #28]
 8004a24:	bfb8      	it	lt
 8004a26:	9204      	strlt	r2, [sp, #16]
 8004a28:	7823      	ldrb	r3, [r4, #0]
 8004a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a2c:	d10a      	bne.n	8004a44 <_svfiprintf_r+0x130>
 8004a2e:	7863      	ldrb	r3, [r4, #1]
 8004a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a32:	d132      	bne.n	8004a9a <_svfiprintf_r+0x186>
 8004a34:	9b03      	ldr	r3, [sp, #12]
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	9203      	str	r2, [sp, #12]
 8004a3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a40:	3402      	adds	r4, #2
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b08 <_svfiprintf_r+0x1f4>
 8004a48:	7821      	ldrb	r1, [r4, #0]
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	f7fb fbcf 	bl	80001f0 <memchr>
 8004a52:	b138      	cbz	r0, 8004a64 <_svfiprintf_r+0x150>
 8004a54:	9b04      	ldr	r3, [sp, #16]
 8004a56:	eba0 000a 	sub.w	r0, r0, sl
 8004a5a:	2240      	movs	r2, #64	@ 0x40
 8004a5c:	4082      	lsls	r2, r0
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	3401      	adds	r4, #1
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a68:	4824      	ldr	r0, [pc, #144]	@ (8004afc <_svfiprintf_r+0x1e8>)
 8004a6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a6e:	2206      	movs	r2, #6
 8004a70:	f7fb fbbe 	bl	80001f0 <memchr>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d036      	beq.n	8004ae6 <_svfiprintf_r+0x1d2>
 8004a78:	4b21      	ldr	r3, [pc, #132]	@ (8004b00 <_svfiprintf_r+0x1ec>)
 8004a7a:	bb1b      	cbnz	r3, 8004ac4 <_svfiprintf_r+0x1b0>
 8004a7c:	9b03      	ldr	r3, [sp, #12]
 8004a7e:	3307      	adds	r3, #7
 8004a80:	f023 0307 	bic.w	r3, r3, #7
 8004a84:	3308      	adds	r3, #8
 8004a86:	9303      	str	r3, [sp, #12]
 8004a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a8a:	4433      	add	r3, r6
 8004a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a8e:	e76a      	b.n	8004966 <_svfiprintf_r+0x52>
 8004a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a94:	460c      	mov	r4, r1
 8004a96:	2001      	movs	r0, #1
 8004a98:	e7a8      	b.n	80049ec <_svfiprintf_r+0xd8>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	3401      	adds	r4, #1
 8004a9e:	9305      	str	r3, [sp, #20]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f04f 0c0a 	mov.w	ip, #10
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aac:	3a30      	subs	r2, #48	@ 0x30
 8004aae:	2a09      	cmp	r2, #9
 8004ab0:	d903      	bls.n	8004aba <_svfiprintf_r+0x1a6>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0c6      	beq.n	8004a44 <_svfiprintf_r+0x130>
 8004ab6:	9105      	str	r1, [sp, #20]
 8004ab8:	e7c4      	b.n	8004a44 <_svfiprintf_r+0x130>
 8004aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004abe:	4604      	mov	r4, r0
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e7f0      	b.n	8004aa6 <_svfiprintf_r+0x192>
 8004ac4:	ab03      	add	r3, sp, #12
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	462a      	mov	r2, r5
 8004aca:	4b0e      	ldr	r3, [pc, #56]	@ (8004b04 <_svfiprintf_r+0x1f0>)
 8004acc:	a904      	add	r1, sp, #16
 8004ace:	4638      	mov	r0, r7
 8004ad0:	f3af 8000 	nop.w
 8004ad4:	1c42      	adds	r2, r0, #1
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	d1d6      	bne.n	8004a88 <_svfiprintf_r+0x174>
 8004ada:	89ab      	ldrh	r3, [r5, #12]
 8004adc:	065b      	lsls	r3, r3, #25
 8004ade:	f53f af2d 	bmi.w	800493c <_svfiprintf_r+0x28>
 8004ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ae4:	e72c      	b.n	8004940 <_svfiprintf_r+0x2c>
 8004ae6:	ab03      	add	r3, sp, #12
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	462a      	mov	r2, r5
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <_svfiprintf_r+0x1f0>)
 8004aee:	a904      	add	r1, sp, #16
 8004af0:	4638      	mov	r0, r7
 8004af2:	f000 f91b 	bl	8004d2c <_printf_i>
 8004af6:	e7ed      	b.n	8004ad4 <_svfiprintf_r+0x1c0>
 8004af8:	08005944 	.word	0x08005944
 8004afc:	0800594e 	.word	0x0800594e
 8004b00:	00000000 	.word	0x00000000
 8004b04:	0800485d 	.word	0x0800485d
 8004b08:	0800594a 	.word	0x0800594a

08004b0c <sbrk_aligned>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b4c <sbrk_aligned+0x40>)
 8004b10:	460c      	mov	r4, r1
 8004b12:	6831      	ldr	r1, [r6, #0]
 8004b14:	4605      	mov	r5, r0
 8004b16:	b911      	cbnz	r1, 8004b1e <sbrk_aligned+0x12>
 8004b18:	f000 fa7c 	bl	8005014 <_sbrk_r>
 8004b1c:	6030      	str	r0, [r6, #0]
 8004b1e:	4621      	mov	r1, r4
 8004b20:	4628      	mov	r0, r5
 8004b22:	f000 fa77 	bl	8005014 <_sbrk_r>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d103      	bne.n	8004b32 <sbrk_aligned+0x26>
 8004b2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b2e:	4620      	mov	r0, r4
 8004b30:	bd70      	pop	{r4, r5, r6, pc}
 8004b32:	1cc4      	adds	r4, r0, #3
 8004b34:	f024 0403 	bic.w	r4, r4, #3
 8004b38:	42a0      	cmp	r0, r4
 8004b3a:	d0f8      	beq.n	8004b2e <sbrk_aligned+0x22>
 8004b3c:	1a21      	subs	r1, r4, r0
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 fa68 	bl	8005014 <_sbrk_r>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d1f2      	bne.n	8004b2e <sbrk_aligned+0x22>
 8004b48:	e7ef      	b.n	8004b2a <sbrk_aligned+0x1e>
 8004b4a:	bf00      	nop
 8004b4c:	200002c4 	.word	0x200002c4

08004b50 <_malloc_r>:
 8004b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b54:	1ccd      	adds	r5, r1, #3
 8004b56:	f025 0503 	bic.w	r5, r5, #3
 8004b5a:	3508      	adds	r5, #8
 8004b5c:	2d0c      	cmp	r5, #12
 8004b5e:	bf38      	it	cc
 8004b60:	250c      	movcc	r5, #12
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	4606      	mov	r6, r0
 8004b66:	db01      	blt.n	8004b6c <_malloc_r+0x1c>
 8004b68:	42a9      	cmp	r1, r5
 8004b6a:	d904      	bls.n	8004b76 <_malloc_r+0x26>
 8004b6c:	230c      	movs	r3, #12
 8004b6e:	6033      	str	r3, [r6, #0]
 8004b70:	2000      	movs	r0, #0
 8004b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c4c <_malloc_r+0xfc>
 8004b7a:	f000 f9f7 	bl	8004f6c <__malloc_lock>
 8004b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b82:	461c      	mov	r4, r3
 8004b84:	bb44      	cbnz	r4, 8004bd8 <_malloc_r+0x88>
 8004b86:	4629      	mov	r1, r5
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7ff ffbf 	bl	8004b0c <sbrk_aligned>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	4604      	mov	r4, r0
 8004b92:	d158      	bne.n	8004c46 <_malloc_r+0xf6>
 8004b94:	f8d8 4000 	ldr.w	r4, [r8]
 8004b98:	4627      	mov	r7, r4
 8004b9a:	2f00      	cmp	r7, #0
 8004b9c:	d143      	bne.n	8004c26 <_malloc_r+0xd6>
 8004b9e:	2c00      	cmp	r4, #0
 8004ba0:	d04b      	beq.n	8004c3a <_malloc_r+0xea>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	eb04 0903 	add.w	r9, r4, r3
 8004bac:	f000 fa32 	bl	8005014 <_sbrk_r>
 8004bb0:	4581      	cmp	r9, r0
 8004bb2:	d142      	bne.n	8004c3a <_malloc_r+0xea>
 8004bb4:	6821      	ldr	r1, [r4, #0]
 8004bb6:	1a6d      	subs	r5, r5, r1
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7ff ffa6 	bl	8004b0c <sbrk_aligned>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d03a      	beq.n	8004c3a <_malloc_r+0xea>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	442b      	add	r3, r5
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	f8d8 3000 	ldr.w	r3, [r8]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	bb62      	cbnz	r2, 8004c2c <_malloc_r+0xdc>
 8004bd2:	f8c8 7000 	str.w	r7, [r8]
 8004bd6:	e00f      	b.n	8004bf8 <_malloc_r+0xa8>
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	1b52      	subs	r2, r2, r5
 8004bdc:	d420      	bmi.n	8004c20 <_malloc_r+0xd0>
 8004bde:	2a0b      	cmp	r2, #11
 8004be0:	d917      	bls.n	8004c12 <_malloc_r+0xc2>
 8004be2:	1961      	adds	r1, r4, r5
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	6025      	str	r5, [r4, #0]
 8004be8:	bf18      	it	ne
 8004bea:	6059      	strne	r1, [r3, #4]
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	bf08      	it	eq
 8004bf0:	f8c8 1000 	streq.w	r1, [r8]
 8004bf4:	5162      	str	r2, [r4, r5]
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f9bd 	bl	8004f78 <__malloc_unlock>
 8004bfe:	f104 000b 	add.w	r0, r4, #11
 8004c02:	1d23      	adds	r3, r4, #4
 8004c04:	f020 0007 	bic.w	r0, r0, #7
 8004c08:	1ac2      	subs	r2, r0, r3
 8004c0a:	bf1c      	itt	ne
 8004c0c:	1a1b      	subne	r3, r3, r0
 8004c0e:	50a3      	strne	r3, [r4, r2]
 8004c10:	e7af      	b.n	8004b72 <_malloc_r+0x22>
 8004c12:	6862      	ldr	r2, [r4, #4]
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	bf0c      	ite	eq
 8004c18:	f8c8 2000 	streq.w	r2, [r8]
 8004c1c:	605a      	strne	r2, [r3, #4]
 8004c1e:	e7eb      	b.n	8004bf8 <_malloc_r+0xa8>
 8004c20:	4623      	mov	r3, r4
 8004c22:	6864      	ldr	r4, [r4, #4]
 8004c24:	e7ae      	b.n	8004b84 <_malloc_r+0x34>
 8004c26:	463c      	mov	r4, r7
 8004c28:	687f      	ldr	r7, [r7, #4]
 8004c2a:	e7b6      	b.n	8004b9a <_malloc_r+0x4a>
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	42a3      	cmp	r3, r4
 8004c32:	d1fb      	bne.n	8004c2c <_malloc_r+0xdc>
 8004c34:	2300      	movs	r3, #0
 8004c36:	6053      	str	r3, [r2, #4]
 8004c38:	e7de      	b.n	8004bf8 <_malloc_r+0xa8>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f000 f99a 	bl	8004f78 <__malloc_unlock>
 8004c44:	e794      	b.n	8004b70 <_malloc_r+0x20>
 8004c46:	6005      	str	r5, [r0, #0]
 8004c48:	e7d6      	b.n	8004bf8 <_malloc_r+0xa8>
 8004c4a:	bf00      	nop
 8004c4c:	200002c8 	.word	0x200002c8

08004c50 <_printf_common>:
 8004c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	4616      	mov	r6, r2
 8004c56:	4698      	mov	r8, r3
 8004c58:	688a      	ldr	r2, [r1, #8]
 8004c5a:	690b      	ldr	r3, [r1, #16]
 8004c5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bfb8      	it	lt
 8004c64:	4613      	movlt	r3, r2
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	b10a      	cbz	r2, 8004c76 <_printf_common+0x26>
 8004c72:	3301      	adds	r3, #1
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	0699      	lsls	r1, r3, #26
 8004c7a:	bf42      	ittt	mi
 8004c7c:	6833      	ldrmi	r3, [r6, #0]
 8004c7e:	3302      	addmi	r3, #2
 8004c80:	6033      	strmi	r3, [r6, #0]
 8004c82:	6825      	ldr	r5, [r4, #0]
 8004c84:	f015 0506 	ands.w	r5, r5, #6
 8004c88:	d106      	bne.n	8004c98 <_printf_common+0x48>
 8004c8a:	f104 0a19 	add.w	sl, r4, #25
 8004c8e:	68e3      	ldr	r3, [r4, #12]
 8004c90:	6832      	ldr	r2, [r6, #0]
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	42ab      	cmp	r3, r5
 8004c96:	dc26      	bgt.n	8004ce6 <_printf_common+0x96>
 8004c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	3b00      	subs	r3, #0
 8004ca0:	bf18      	it	ne
 8004ca2:	2301      	movne	r3, #1
 8004ca4:	0692      	lsls	r2, r2, #26
 8004ca6:	d42b      	bmi.n	8004d00 <_printf_common+0xb0>
 8004ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cac:	4641      	mov	r1, r8
 8004cae:	4638      	mov	r0, r7
 8004cb0:	47c8      	blx	r9
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d01e      	beq.n	8004cf4 <_printf_common+0xa4>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	6922      	ldr	r2, [r4, #16]
 8004cba:	f003 0306 	and.w	r3, r3, #6
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	bf02      	ittt	eq
 8004cc2:	68e5      	ldreq	r5, [r4, #12]
 8004cc4:	6833      	ldreq	r3, [r6, #0]
 8004cc6:	1aed      	subeq	r5, r5, r3
 8004cc8:	68a3      	ldr	r3, [r4, #8]
 8004cca:	bf0c      	ite	eq
 8004ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd0:	2500      	movne	r5, #0
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	bfc4      	itt	gt
 8004cd6:	1a9b      	subgt	r3, r3, r2
 8004cd8:	18ed      	addgt	r5, r5, r3
 8004cda:	2600      	movs	r6, #0
 8004cdc:	341a      	adds	r4, #26
 8004cde:	42b5      	cmp	r5, r6
 8004ce0:	d11a      	bne.n	8004d18 <_printf_common+0xc8>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e008      	b.n	8004cf8 <_printf_common+0xa8>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4652      	mov	r2, sl
 8004cea:	4641      	mov	r1, r8
 8004cec:	4638      	mov	r0, r7
 8004cee:	47c8      	blx	r9
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d103      	bne.n	8004cfc <_printf_common+0xac>
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cfc:	3501      	adds	r5, #1
 8004cfe:	e7c6      	b.n	8004c8e <_printf_common+0x3e>
 8004d00:	18e1      	adds	r1, r4, r3
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	2030      	movs	r0, #48	@ 0x30
 8004d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d0a:	4422      	add	r2, r4
 8004d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d14:	3302      	adds	r3, #2
 8004d16:	e7c7      	b.n	8004ca8 <_printf_common+0x58>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4641      	mov	r1, r8
 8004d1e:	4638      	mov	r0, r7
 8004d20:	47c8      	blx	r9
 8004d22:	3001      	adds	r0, #1
 8004d24:	d0e6      	beq.n	8004cf4 <_printf_common+0xa4>
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7d9      	b.n	8004cde <_printf_common+0x8e>
	...

08004d2c <_printf_i>:
 8004d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	7e0f      	ldrb	r7, [r1, #24]
 8004d32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d34:	2f78      	cmp	r7, #120	@ 0x78
 8004d36:	4691      	mov	r9, r2
 8004d38:	4680      	mov	r8, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	469a      	mov	sl, r3
 8004d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d42:	d807      	bhi.n	8004d54 <_printf_i+0x28>
 8004d44:	2f62      	cmp	r7, #98	@ 0x62
 8004d46:	d80a      	bhi.n	8004d5e <_printf_i+0x32>
 8004d48:	2f00      	cmp	r7, #0
 8004d4a:	f000 80d2 	beq.w	8004ef2 <_printf_i+0x1c6>
 8004d4e:	2f58      	cmp	r7, #88	@ 0x58
 8004d50:	f000 80b9 	beq.w	8004ec6 <_printf_i+0x19a>
 8004d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d5c:	e03a      	b.n	8004dd4 <_printf_i+0xa8>
 8004d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d62:	2b15      	cmp	r3, #21
 8004d64:	d8f6      	bhi.n	8004d54 <_printf_i+0x28>
 8004d66:	a101      	add	r1, pc, #4	@ (adr r1, 8004d6c <_printf_i+0x40>)
 8004d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d6c:	08004dc5 	.word	0x08004dc5
 8004d70:	08004dd9 	.word	0x08004dd9
 8004d74:	08004d55 	.word	0x08004d55
 8004d78:	08004d55 	.word	0x08004d55
 8004d7c:	08004d55 	.word	0x08004d55
 8004d80:	08004d55 	.word	0x08004d55
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004d55 	.word	0x08004d55
 8004d8c:	08004d55 	.word	0x08004d55
 8004d90:	08004d55 	.word	0x08004d55
 8004d94:	08004d55 	.word	0x08004d55
 8004d98:	08004ed9 	.word	0x08004ed9
 8004d9c:	08004e03 	.word	0x08004e03
 8004da0:	08004e93 	.word	0x08004e93
 8004da4:	08004d55 	.word	0x08004d55
 8004da8:	08004d55 	.word	0x08004d55
 8004dac:	08004efb 	.word	0x08004efb
 8004db0:	08004d55 	.word	0x08004d55
 8004db4:	08004e03 	.word	0x08004e03
 8004db8:	08004d55 	.word	0x08004d55
 8004dbc:	08004d55 	.word	0x08004d55
 8004dc0:	08004e9b 	.word	0x08004e9b
 8004dc4:	6833      	ldr	r3, [r6, #0]
 8004dc6:	1d1a      	adds	r2, r3, #4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6032      	str	r2, [r6, #0]
 8004dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e09d      	b.n	8004f14 <_printf_i+0x1e8>
 8004dd8:	6833      	ldr	r3, [r6, #0]
 8004dda:	6820      	ldr	r0, [r4, #0]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	6031      	str	r1, [r6, #0]
 8004de0:	0606      	lsls	r6, r0, #24
 8004de2:	d501      	bpl.n	8004de8 <_printf_i+0xbc>
 8004de4:	681d      	ldr	r5, [r3, #0]
 8004de6:	e003      	b.n	8004df0 <_printf_i+0xc4>
 8004de8:	0645      	lsls	r5, r0, #25
 8004dea:	d5fb      	bpl.n	8004de4 <_printf_i+0xb8>
 8004dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	da03      	bge.n	8004dfc <_printf_i+0xd0>
 8004df4:	232d      	movs	r3, #45	@ 0x2d
 8004df6:	426d      	negs	r5, r5
 8004df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dfc:	4859      	ldr	r0, [pc, #356]	@ (8004f64 <_printf_i+0x238>)
 8004dfe:	230a      	movs	r3, #10
 8004e00:	e011      	b.n	8004e26 <_printf_i+0xfa>
 8004e02:	6821      	ldr	r1, [r4, #0]
 8004e04:	6833      	ldr	r3, [r6, #0]
 8004e06:	0608      	lsls	r0, r1, #24
 8004e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e0c:	d402      	bmi.n	8004e14 <_printf_i+0xe8>
 8004e0e:	0649      	lsls	r1, r1, #25
 8004e10:	bf48      	it	mi
 8004e12:	b2ad      	uxthmi	r5, r5
 8004e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e16:	4853      	ldr	r0, [pc, #332]	@ (8004f64 <_printf_i+0x238>)
 8004e18:	6033      	str	r3, [r6, #0]
 8004e1a:	bf14      	ite	ne
 8004e1c:	230a      	movne	r3, #10
 8004e1e:	2308      	moveq	r3, #8
 8004e20:	2100      	movs	r1, #0
 8004e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e26:	6866      	ldr	r6, [r4, #4]
 8004e28:	60a6      	str	r6, [r4, #8]
 8004e2a:	2e00      	cmp	r6, #0
 8004e2c:	bfa2      	ittt	ge
 8004e2e:	6821      	ldrge	r1, [r4, #0]
 8004e30:	f021 0104 	bicge.w	r1, r1, #4
 8004e34:	6021      	strge	r1, [r4, #0]
 8004e36:	b90d      	cbnz	r5, 8004e3c <_printf_i+0x110>
 8004e38:	2e00      	cmp	r6, #0
 8004e3a:	d04b      	beq.n	8004ed4 <_printf_i+0x1a8>
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e42:	fb03 5711 	mls	r7, r3, r1, r5
 8004e46:	5dc7      	ldrb	r7, [r0, r7]
 8004e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e4c:	462f      	mov	r7, r5
 8004e4e:	42bb      	cmp	r3, r7
 8004e50:	460d      	mov	r5, r1
 8004e52:	d9f4      	bls.n	8004e3e <_printf_i+0x112>
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d10b      	bne.n	8004e70 <_printf_i+0x144>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	07df      	lsls	r7, r3, #31
 8004e5c:	d508      	bpl.n	8004e70 <_printf_i+0x144>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	6861      	ldr	r1, [r4, #4]
 8004e62:	4299      	cmp	r1, r3
 8004e64:	bfde      	ittt	le
 8004e66:	2330      	movle	r3, #48	@ 0x30
 8004e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e70:	1b92      	subs	r2, r2, r6
 8004e72:	6122      	str	r2, [r4, #16]
 8004e74:	f8cd a000 	str.w	sl, [sp]
 8004e78:	464b      	mov	r3, r9
 8004e7a:	aa03      	add	r2, sp, #12
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4640      	mov	r0, r8
 8004e80:	f7ff fee6 	bl	8004c50 <_printf_common>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d14a      	bne.n	8004f1e <_printf_i+0x1f2>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e8c:	b004      	add	sp, #16
 8004e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	f043 0320 	orr.w	r3, r3, #32
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	4833      	ldr	r0, [pc, #204]	@ (8004f68 <_printf_i+0x23c>)
 8004e9c:	2778      	movs	r7, #120	@ 0x78
 8004e9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	6831      	ldr	r1, [r6, #0]
 8004ea6:	061f      	lsls	r7, r3, #24
 8004ea8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004eac:	d402      	bmi.n	8004eb4 <_printf_i+0x188>
 8004eae:	065f      	lsls	r7, r3, #25
 8004eb0:	bf48      	it	mi
 8004eb2:	b2ad      	uxthmi	r5, r5
 8004eb4:	6031      	str	r1, [r6, #0]
 8004eb6:	07d9      	lsls	r1, r3, #31
 8004eb8:	bf44      	itt	mi
 8004eba:	f043 0320 	orrmi.w	r3, r3, #32
 8004ebe:	6023      	strmi	r3, [r4, #0]
 8004ec0:	b11d      	cbz	r5, 8004eca <_printf_i+0x19e>
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	e7ac      	b.n	8004e20 <_printf_i+0xf4>
 8004ec6:	4827      	ldr	r0, [pc, #156]	@ (8004f64 <_printf_i+0x238>)
 8004ec8:	e7e9      	b.n	8004e9e <_printf_i+0x172>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	f023 0320 	bic.w	r3, r3, #32
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	e7f6      	b.n	8004ec2 <_printf_i+0x196>
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	e7bd      	b.n	8004e54 <_printf_i+0x128>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	6825      	ldr	r5, [r4, #0]
 8004edc:	6961      	ldr	r1, [r4, #20]
 8004ede:	1d18      	adds	r0, r3, #4
 8004ee0:	6030      	str	r0, [r6, #0]
 8004ee2:	062e      	lsls	r6, r5, #24
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0x1c0>
 8004ee8:	6019      	str	r1, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0x1c6>
 8004eec:	0668      	lsls	r0, r5, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0x1bc>
 8004ef0:	8019      	strh	r1, [r3, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6123      	str	r3, [r4, #16]
 8004ef6:	4616      	mov	r6, r2
 8004ef8:	e7bc      	b.n	8004e74 <_printf_i+0x148>
 8004efa:	6833      	ldr	r3, [r6, #0]
 8004efc:	1d1a      	adds	r2, r3, #4
 8004efe:	6032      	str	r2, [r6, #0]
 8004f00:	681e      	ldr	r6, [r3, #0]
 8004f02:	6862      	ldr	r2, [r4, #4]
 8004f04:	2100      	movs	r1, #0
 8004f06:	4630      	mov	r0, r6
 8004f08:	f7fb f972 	bl	80001f0 <memchr>
 8004f0c:	b108      	cbz	r0, 8004f12 <_printf_i+0x1e6>
 8004f0e:	1b80      	subs	r0, r0, r6
 8004f10:	6060      	str	r0, [r4, #4]
 8004f12:	6863      	ldr	r3, [r4, #4]
 8004f14:	6123      	str	r3, [r4, #16]
 8004f16:	2300      	movs	r3, #0
 8004f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f1c:	e7aa      	b.n	8004e74 <_printf_i+0x148>
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	4632      	mov	r2, r6
 8004f22:	4649      	mov	r1, r9
 8004f24:	4640      	mov	r0, r8
 8004f26:	47d0      	blx	sl
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d0ad      	beq.n	8004e88 <_printf_i+0x15c>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	079b      	lsls	r3, r3, #30
 8004f30:	d413      	bmi.n	8004f5a <_printf_i+0x22e>
 8004f32:	68e0      	ldr	r0, [r4, #12]
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	4298      	cmp	r0, r3
 8004f38:	bfb8      	it	lt
 8004f3a:	4618      	movlt	r0, r3
 8004f3c:	e7a6      	b.n	8004e8c <_printf_i+0x160>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4632      	mov	r2, r6
 8004f42:	4649      	mov	r1, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	47d0      	blx	sl
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d09d      	beq.n	8004e88 <_printf_i+0x15c>
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	9903      	ldr	r1, [sp, #12]
 8004f52:	1a5b      	subs	r3, r3, r1
 8004f54:	42ab      	cmp	r3, r5
 8004f56:	dcf2      	bgt.n	8004f3e <_printf_i+0x212>
 8004f58:	e7eb      	b.n	8004f32 <_printf_i+0x206>
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	f104 0619 	add.w	r6, r4, #25
 8004f60:	e7f5      	b.n	8004f4e <_printf_i+0x222>
 8004f62:	bf00      	nop
 8004f64:	08005955 	.word	0x08005955
 8004f68:	08005966 	.word	0x08005966

08004f6c <__malloc_lock>:
 8004f6c:	4801      	ldr	r0, [pc, #4]	@ (8004f74 <__malloc_lock+0x8>)
 8004f6e:	f7ff bc73 	b.w	8004858 <__retarget_lock_acquire_recursive>
 8004f72:	bf00      	nop
 8004f74:	200002c0 	.word	0x200002c0

08004f78 <__malloc_unlock>:
 8004f78:	4801      	ldr	r0, [pc, #4]	@ (8004f80 <__malloc_unlock+0x8>)
 8004f7a:	f7ff bc6e 	b.w	800485a <__retarget_lock_release_recursive>
 8004f7e:	bf00      	nop
 8004f80:	200002c0 	.word	0x200002c0

08004f84 <_realloc_r>:
 8004f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f88:	4680      	mov	r8, r0
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	b921      	cbnz	r1, 8004f9a <_realloc_r+0x16>
 8004f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	4611      	mov	r1, r2
 8004f96:	f7ff bddb 	b.w	8004b50 <_malloc_r>
 8004f9a:	b92a      	cbnz	r2, 8004fa8 <_realloc_r+0x24>
 8004f9c:	f000 f858 	bl	8005050 <_free_r>
 8004fa0:	2400      	movs	r4, #0
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	f000 f89c 	bl	80050e4 <_malloc_usable_size_r>
 8004fac:	4285      	cmp	r5, r0
 8004fae:	4606      	mov	r6, r0
 8004fb0:	d802      	bhi.n	8004fb8 <_realloc_r+0x34>
 8004fb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004fb6:	d8f4      	bhi.n	8004fa2 <_realloc_r+0x1e>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff fdc8 	bl	8004b50 <_malloc_r>
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d0ec      	beq.n	8004fa0 <_realloc_r+0x1c>
 8004fc6:	42b5      	cmp	r5, r6
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4621      	mov	r1, r4
 8004fcc:	bf28      	it	cs
 8004fce:	4632      	movcs	r2, r6
 8004fd0:	f000 f830 	bl	8005034 <memcpy>
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f000 f83a 	bl	8005050 <_free_r>
 8004fdc:	463c      	mov	r4, r7
 8004fde:	e7e0      	b.n	8004fa2 <_realloc_r+0x1e>

08004fe0 <memmove>:
 8004fe0:	4288      	cmp	r0, r1
 8004fe2:	b510      	push	{r4, lr}
 8004fe4:	eb01 0402 	add.w	r4, r1, r2
 8004fe8:	d902      	bls.n	8004ff0 <memmove+0x10>
 8004fea:	4284      	cmp	r4, r0
 8004fec:	4623      	mov	r3, r4
 8004fee:	d807      	bhi.n	8005000 <memmove+0x20>
 8004ff0:	1e43      	subs	r3, r0, #1
 8004ff2:	42a1      	cmp	r1, r4
 8004ff4:	d008      	beq.n	8005008 <memmove+0x28>
 8004ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ffe:	e7f8      	b.n	8004ff2 <memmove+0x12>
 8005000:	4402      	add	r2, r0
 8005002:	4601      	mov	r1, r0
 8005004:	428a      	cmp	r2, r1
 8005006:	d100      	bne.n	800500a <memmove+0x2a>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800500e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005012:	e7f7      	b.n	8005004 <memmove+0x24>

08005014 <_sbrk_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d06      	ldr	r5, [pc, #24]	@ (8005030 <_sbrk_r+0x1c>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fc fcf6 	bl	8001a10 <_sbrk>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_sbrk_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_sbrk_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	200002cc 	.word	0x200002cc

08005034 <memcpy>:
 8005034:	440a      	add	r2, r1
 8005036:	4291      	cmp	r1, r2
 8005038:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800503c:	d100      	bne.n	8005040 <memcpy+0xc>
 800503e:	4770      	bx	lr
 8005040:	b510      	push	{r4, lr}
 8005042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800504a:	4291      	cmp	r1, r2
 800504c:	d1f9      	bne.n	8005042 <memcpy+0xe>
 800504e:	bd10      	pop	{r4, pc}

08005050 <_free_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4605      	mov	r5, r0
 8005054:	2900      	cmp	r1, #0
 8005056:	d041      	beq.n	80050dc <_free_r+0x8c>
 8005058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800505c:	1f0c      	subs	r4, r1, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	bfb8      	it	lt
 8005062:	18e4      	addlt	r4, r4, r3
 8005064:	f7ff ff82 	bl	8004f6c <__malloc_lock>
 8005068:	4a1d      	ldr	r2, [pc, #116]	@ (80050e0 <_free_r+0x90>)
 800506a:	6813      	ldr	r3, [r2, #0]
 800506c:	b933      	cbnz	r3, 800507c <_free_r+0x2c>
 800506e:	6063      	str	r3, [r4, #4]
 8005070:	6014      	str	r4, [r2, #0]
 8005072:	4628      	mov	r0, r5
 8005074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005078:	f7ff bf7e 	b.w	8004f78 <__malloc_unlock>
 800507c:	42a3      	cmp	r3, r4
 800507e:	d908      	bls.n	8005092 <_free_r+0x42>
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	1821      	adds	r1, r4, r0
 8005084:	428b      	cmp	r3, r1
 8005086:	bf01      	itttt	eq
 8005088:	6819      	ldreq	r1, [r3, #0]
 800508a:	685b      	ldreq	r3, [r3, #4]
 800508c:	1809      	addeq	r1, r1, r0
 800508e:	6021      	streq	r1, [r4, #0]
 8005090:	e7ed      	b.n	800506e <_free_r+0x1e>
 8005092:	461a      	mov	r2, r3
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	b10b      	cbz	r3, 800509c <_free_r+0x4c>
 8005098:	42a3      	cmp	r3, r4
 800509a:	d9fa      	bls.n	8005092 <_free_r+0x42>
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	1850      	adds	r0, r2, r1
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d10b      	bne.n	80050bc <_free_r+0x6c>
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	4401      	add	r1, r0
 80050a8:	1850      	adds	r0, r2, r1
 80050aa:	4283      	cmp	r3, r0
 80050ac:	6011      	str	r1, [r2, #0]
 80050ae:	d1e0      	bne.n	8005072 <_free_r+0x22>
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	6053      	str	r3, [r2, #4]
 80050b6:	4408      	add	r0, r1
 80050b8:	6010      	str	r0, [r2, #0]
 80050ba:	e7da      	b.n	8005072 <_free_r+0x22>
 80050bc:	d902      	bls.n	80050c4 <_free_r+0x74>
 80050be:	230c      	movs	r3, #12
 80050c0:	602b      	str	r3, [r5, #0]
 80050c2:	e7d6      	b.n	8005072 <_free_r+0x22>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	1821      	adds	r1, r4, r0
 80050c8:	428b      	cmp	r3, r1
 80050ca:	bf04      	itt	eq
 80050cc:	6819      	ldreq	r1, [r3, #0]
 80050ce:	685b      	ldreq	r3, [r3, #4]
 80050d0:	6063      	str	r3, [r4, #4]
 80050d2:	bf04      	itt	eq
 80050d4:	1809      	addeq	r1, r1, r0
 80050d6:	6021      	streq	r1, [r4, #0]
 80050d8:	6054      	str	r4, [r2, #4]
 80050da:	e7ca      	b.n	8005072 <_free_r+0x22>
 80050dc:	bd38      	pop	{r3, r4, r5, pc}
 80050de:	bf00      	nop
 80050e0:	200002c8 	.word	0x200002c8

080050e4 <_malloc_usable_size_r>:
 80050e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e8:	1f18      	subs	r0, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bfbc      	itt	lt
 80050ee:	580b      	ldrlt	r3, [r1, r0]
 80050f0:	18c0      	addlt	r0, r0, r3
 80050f2:	4770      	bx	lr

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
